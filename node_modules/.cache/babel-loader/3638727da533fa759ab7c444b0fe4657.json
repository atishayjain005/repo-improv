{"ast":null,"code":"/* import { useContext , useState } from 'react'; */\nasync function FetchGraphQL(text, variables) {\n  try {\n    await new Promise((resolve, reject) => app.auth().onAuthStateChanged(user => {\n      if (user) {\n        const TOKEN = localStorage.getItem(\"token\");\n        console.log(TOKEN); // Fetch data from GitHub's GraphQL API:\n\n        const response = fetch('https://api.github.com/graphql', {\n          method: 'POST',\n          headers: {\n            Authorization: `bearer  ${TOKEN}`,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            query: text,\n            variables\n          })\n        }); // Get the response as JSON\n\n        return response.json(); // User is signed in.\n\n        resolve(user);\n      } else {\n        // No user is signed in.\n        reject('no user logged in');\n      }\n    }, // Prevent console error\n    error => reject(error)));\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\n_c = FetchGraphQL;\nexport default FetchGraphQL;\n\nvar _c;\n\n$RefreshReg$(_c, \"FetchGraphQL\");","map":{"version":3,"sources":["/home/akshay/Atishay/appointy-screening/src/FetchGraphQL.jsx"],"names":["FetchGraphQL","text","variables","Promise","resolve","reject","app","auth","onAuthStateChanged","user","TOKEN","localStorage","getItem","console","log","response","fetch","method","headers","Authorization","body","JSON","stringify","query","json","error"],"mappings":"AACA;AACA,eAAeA,YAAf,CAA4BC,IAA5B,EAAkCC,SAAlC,EAA4C;AAG1C,MAAI;AACF,UAAM,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAChBC,GAAG,CAACC,IAAJ,GAAWC,kBAAX,CACEC,IAAI,IAAI;AACN,UAAIA,IAAJ,EAAU;AAElB,cAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ,EAHkB,CAIlB;;AACA,cAAMK,QAAQ,GAAGC,KAAK,CAAC,gCAAD,EAAmC;AACvDC,UAAAA,MAAM,EAAE,MAD+C;AAEvDC,UAAAA,OAAO,EAAE;AACPC,YAAAA,aAAa,EAAG,WAAUT,KAAM,EADzB;AAEP,4BAAgB;AAFT,WAF8C;AAMvDU,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,YAAAA,KAAK,EAAEtB,IADY;AAEnBC,YAAAA;AAFmB,WAAf;AANiD,SAAnC,CAAtB,CALkB,CAiBlB;;AACA,eAAOa,QAAQ,CAACS,IAAT,EAAP,CAlBkB,CAmBR;;AACApB,QAAAA,OAAO,CAACK,IAAD,CAAP;AACD,OArBD,MAqBO;AACL;AACAJ,QAAAA,MAAM,CAAC,mBAAD,CAAN;AACD;AACF,KA3BH,EA4BE;AACAoB,IAAAA,KAAK,IAAIpB,MAAM,CAACoB,KAAD,CA7BjB,CADI,CAAN;AAiCA,WAAO,IAAP;AACD,GAnCD,CAmCE,OAAOA,KAAP,EAAc;AACd,WAAO,KAAP;AACD;AAIF;;KA5CczB,Y;AA8Cf,eAAeA,YAAf","sourcesContent":["\n/* import { useContext , useState } from 'react'; */\nasync function FetchGraphQL(text, variables){  \n\n\n  try {\n    await new Promise((resolve, reject) =>\n      app.auth().onAuthStateChanged(\n        user => {\n          if (user) {\n\n  const TOKEN = localStorage.getItem(\"token\");\n  console.log(TOKEN)\n  // Fetch data from GitHub's GraphQL API:\n  const response = fetch('https://api.github.com/graphql', {\n    method: 'POST',\n    headers: {\n      Authorization: `bearer  ${TOKEN}`,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      query: text,\n      variables,\n    }),\n  });\n\n  // Get the response as JSON\n  return response.json();\n            // User is signed in.\n            resolve(user)\n          } else {\n            // No user is signed in.\n            reject('no user logged in')\n          }\n        },\n        // Prevent console error\n        error => reject(error)\n      )\n    )\n    return true\n  } catch (error) {\n    return false\n  }\n\n\n\n}\n\nexport default FetchGraphQL;"]},"metadata":{},"sourceType":"module"}