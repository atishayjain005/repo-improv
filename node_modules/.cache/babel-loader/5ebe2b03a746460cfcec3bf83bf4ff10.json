{"ast":null,"code":"import _regeneratorRuntime from\"/home/akshay/Atishay/appointy-screening/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/akshay/Atishay/appointy-screening/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";var _GitDataRepositoryNameQuery;import React from\"react\";import{RelayEnvironmentProvider,loadQuery,usePreloadedQuery}from\"react-relay/hooks\";/* \nimport RelayEnvironment from \"../RelayEnvironment\"; */import{Button,Container,Box,Typography,Card,CardContent,CardActions}from\"@mui/material\";import{Environment,Network,RecordSource,Store}from'relay-runtime';import FetchGraphQL from'../FetchGraphQL';import{Link}from\"react-router-dom\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Suspense=React.Suspense;var RepositoryNameQuery=_GitDataRepositoryNameQuery!==void 0?_GitDataRepositoryNameQuery:_GitDataRepositoryNameQuery=require(\"./__generated__/GitDataRepositoryNameQuery.graphql\");function fetchRelay(_x,_x2){return _fetchRelay.apply(this,arguments);}// Export a singleton instance of Relay Environment configured with our network function:\nfunction _fetchRelay(){_fetchRelay=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(params,variables){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:console.log(\"fetching query \".concat(params.name,\" with \").concat(JSON.stringify(variables)));_context.next=3;return FetchGraphQL(params.text,variables);case 3:return _context.abrupt(\"return\",_context.sent);case 4:case\"end\":return _context.stop();}}},_callee);}));return _fetchRelay.apply(this,arguments);}var env=new Environment({network:Network.create(fetchRelay),store:new Store(new RecordSource())});var preloadedQuery=loadQuery(env,RepositoryNameQuery,{usr:localStorage.getItem(\"user\")});function GitData(props){var data=usePreloadedQuery(RepositoryNameQuery,props.preloadedQuery);var signOut=function signOut(){localStorage.clear();window.location=\"/\";};return/*#__PURE__*/_jsx(Container,{children:data?/*#__PURE__*/_jsxs(Box,{children:[/*#__PURE__*/_jsx(Typography,{color:\"lightgrey\",my:10,sx:{fontSize:72,fontWeight:900},children:\"Repo-improv\"}),/*#__PURE__*/_jsx(Button,{variant:\"contained\",onClick:signOut,children:\"Sign Out\"}),/*#__PURE__*/_jsx(Box,{sx:{display:\"flex\",flexDirection:\"row\",flexWrap:\"wrap\",justifyContent:\"space-between\",alignItems:\"stretch\"},children:data.user.repositories.nodes.map(function(data){return/*#__PURE__*/_jsxs(Card,{sx:{minWidth:275,margin:5,display:\"flex\",flexDirection:\"column\",flexWrap:\"wrap\"},children:[/*#__PURE__*/_jsxs(CardContent,{children:[/*#__PURE__*/_jsx(Typography,{sx:{fontSize:14},color:\"text.secondary\",gutterBottom:true,children:data.createdAt}),/*#__PURE__*/_jsx(Typography,{variant:\"h5\",component:\"div\",children:data.name}),/*#__PURE__*/_jsxs(Typography,{sx:{mb:1.5},color:\"text.secondary\",children:[data.description,\"kjbk\"]}),/*#__PURE__*/_jsxs(Typography,{variant:\"body2\",children:[\"well meaning and kindly.\",/*#__PURE__*/_jsx(\"br\",{}),'\"a benevolent smile\"']})]}),/*#__PURE__*/_jsx(CardActions,{children:/*#__PURE__*/_jsx(Button,{children:/*#__PURE__*/_jsx(Link,{underline:\"none\",to:data.url,children:\"link\"})})})]});})})]}):/*#__PURE__*/_jsx(\"h1\",{children:\"no data found\"})});}function GitDataRoot(props){return/*#__PURE__*/_jsx(RelayEnvironmentProvider,{environment:env,children:/*#__PURE__*/_jsx(Suspense,{fallback:\"Loading...\",children:/*#__PURE__*/_jsx(GitData,{preloadedQuery:preloadedQuery})})});}export default GitDataRoot;","map":{"version":3,"sources":["/home/akshay/Atishay/appointy-screening/src/route/GitData.jsx"],"names":["React","RelayEnvironmentProvider","loadQuery","usePreloadedQuery","Button","Container","Box","Typography","Card","CardContent","CardActions","Environment","Network","RecordSource","Store","FetchGraphQL","Link","Suspense","RepositoryNameQuery","fetchRelay","params","variables","console","log","name","JSON","stringify","text","env","network","create","store","preloadedQuery","usr","localStorage","getItem","GitData","props","data","signOut","clear","window","location","fontSize","fontWeight","display","flexDirection","flexWrap","justifyContent","alignItems","user","repositories","nodes","map","minWidth","margin","createdAt","mb","description","url","GitDataRoot"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport graphql from \"babel-plugin-relay/macro\";\nimport {\n  RelayEnvironmentProvider,\n  loadQuery,\n  usePreloadedQuery,\n} from \"react-relay/hooks\";/* \nimport RelayEnvironment from \"../RelayEnvironment\"; */\nimport { Button, Container, Box, Typography , Card, CardContent,CardActions} from \"@mui/material\";\nimport {Environment, Network, RecordSource, Store} from 'relay-runtime';\nimport FetchGraphQL from '../FetchGraphQL';\nimport {Link} from \"react-router-dom\"\n\nconst { Suspense } = React;\n\n\n\nconst RepositoryNameQuery = graphql`\n  query GitDataRepositoryNameQuery($usr : String!) {\n    user(login: $usr) {\n      repositories(first: 10, orderBy: { field: CREATED_AT, direction: DESC }) {\n        nodes {\n          name\n          description\n          collaborators(first:10) {\n            nodes{\n              name\n            }\n          }\n          issues(first:10,orderBy:{field: CREATED_AT,direction:DESC}){\n            nodes{\n              __typename\n            }\n          }\n          createdAt\n          url\n        }\n      }\n    }\n  }\n`;\n\nasync function fetchRelay(params, variables) {\n  console.log(`fetching query ${params.name} with ${JSON.stringify(variables)}`);\n  return await FetchGraphQL(params.text, variables);\n}\n\n// Export a singleton instance of Relay Environment configured with our network function:\nconst env = new Environment({\n  network: Network.create(fetchRelay),\n  store: new Store(new RecordSource()),\n});\n\nconst preloadedQuery = loadQuery(env, RepositoryNameQuery, {\nusr : localStorage.getItem(\"user\")\n});\n\nfunction GitData(props) {\n  const data = usePreloadedQuery(RepositoryNameQuery, props.preloadedQuery);\n\n  const signOut = () =>{\n    localStorage.clear();\n    window.location=\"/\";\n  }\n\n  return (\n    <Container>\n      {\n        data?(\n          <Box>\n        <Typography\n          color=\"lightgrey\"\n          my={10}\n          sx={{ fontSize: 72, fontWeight: 900 }}\n        >\n          Repo-improv\n        </Typography>\n        <Button variant=\"contained\" onClick={signOut}>Sign Out</Button>\n        <Box sx={{ display:\"flex\", flexDirection:\"row\", flexWrap:\"wrap\", justifyContent:\"space-between\",alignItems:\"stretch\"}}>\n          {data.user.repositories.nodes.map((data) => {\n            return (\n              <Card  sx={{ minWidth: 275, margin: 5, display:\"flex\" , flexDirection:\"column\", flexWrap:\"wrap\" }}>\n      <CardContent>\n        <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\n          {data.createdAt}\n        </Typography>\n        <Typography variant=\"h5\" component=\"div\">\n          {data.name}\n        </Typography>\n        <Typography sx={{ mb: 1.5 }} color=\"text.secondary\">\n          {data.description}kjbk\n        </Typography>\n        <Typography variant=\"body2\">\n          well meaning and kindly.\n          <br />\n          {'\"a benevolent smile\"'}\n        </Typography>\n      </CardContent>\n      <CardActions>\n      <Button><Link underline=\"none\" to={data.url}>link</Link></Button>\n      </CardActions>\n    </Card>\n            );\n          })}\n        </Box>\n      </Box>\n      )\n      :\n      (<h1>no data found</h1>)\n      }\n    </Container>\n  );\n}\n\nfunction GitDataRoot(props) {\n  return (\n    <RelayEnvironmentProvider environment={env}>\n      <Suspense fallback={\"Loading...\"}>\n        <GitData preloadedQuery={preloadedQuery} />\n      </Suspense>\n    </RelayEnvironmentProvider>\n  );\n}\n\nexport default GitDataRoot;\n"]},"metadata":{},"sourceType":"module"}