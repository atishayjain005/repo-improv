{"ast":null,"code":"import _regeneratorRuntime from\"/home/akshay/Atishay/appointy-screening/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/akshay/Atishay/appointy-screening/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{Environment,Network,RecordSource,Store}from'relay-runtime';import FetchGraphQL from'./FetchGraphQL';// Relay passes a \"params\" object with the query name and text. So we define a helper function\n// to call our fetchGraphQL utility with params.text.\nfunction fetchRelay(_x,_x2){return _fetchRelay.apply(this,arguments);}// Export a singleton instance of Relay Environment configured with our network function:\nfunction _fetchRelay(){_fetchRelay=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(params,variables){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:console.log(\"fetching query \".concat(params.name,\" with \").concat(JSON.stringify(variables)));return _context.abrupt(\"return\",FetchGraphQL(params.text,variables));case 2:case\"end\":return _context.stop();}}},_callee);}));return _fetchRelay.apply(this,arguments);}export default new Environment({network:Network.create(fetchRelay),store:new Store(new RecordSource())});","map":{"version":3,"sources":["/home/akshay/Atishay/appointy-screening/src/RelayEnvironment.js"],"names":["Environment","Network","RecordSource","Store","FetchGraphQL","fetchRelay","params","variables","console","log","name","JSON","stringify","text","network","create","store"],"mappings":"iPAAA,OAAQA,WAAR,CAAqBC,OAArB,CAA8BC,YAA9B,CAA4CC,KAA5C,KAAwD,eAAxD,CACA,MAAOC,CAAAA,YAAP,KAAyB,gBAAzB,CAEA;AACA;QACeC,CAAAA,U,mDAKf;2FALA,iBAA0BC,MAA1B,CAAkCC,SAAlC,kHACEC,OAAO,CAACC,GAAR,0BAA8BH,MAAM,CAACI,IAArC,kBAAkDC,IAAI,CAACC,SAAL,CAAeL,SAAf,CAAlD,GADF,gCAESH,YAAY,CAACE,MAAM,CAACO,IAAR,CAAcN,SAAd,CAFrB,wD,6CAMA,cAAe,IAAIP,CAAAA,WAAJ,CAAgB,CAC7Bc,OAAO,CAAEb,OAAO,CAACc,MAAR,CAAeV,UAAf,CADoB,CAE7BW,KAAK,CAAE,GAAIb,CAAAA,KAAJ,CAAU,GAAID,CAAAA,YAAJ,EAAV,CAFsB,CAAhB,CAAf","sourcesContent":["import {Environment, Network, RecordSource, Store} from 'relay-runtime';\nimport FetchGraphQL from './FetchGraphQL';\n\n// Relay passes a \"params\" object with the query name and text. So we define a helper function\n// to call our fetchGraphQL utility with params.text.\nasync function fetchRelay(params, variables) {\n  console.log(`fetching query ${params.name} with ${JSON.stringify(variables)}`);\n  return FetchGraphQL(params.text, variables);\n}\n\n// Export a singleton instance of Relay Environment configured with our network function:\nexport default new Environment({\n  network: Network.create(fetchRelay),\n  store: new Store(new RecordSource()),\n});"]},"metadata":{},"sourceType":"module"}