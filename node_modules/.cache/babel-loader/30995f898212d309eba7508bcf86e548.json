{"ast":null,"code":"import _regeneratorRuntime from\"/home/akshay/Atishay/appointy-screening/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/akshay/Atishay/appointy-screening/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{Environment,Network,RecordSource,Store}from\"relay-runtime\";import FetchGraphQL from\"./FetchGraphQL\";function fetchRelay(_x,_x2){return _fetchRelay.apply(this,arguments);}// Export a singleton instance of Relay Environment conf2igured with our network function:\nfunction _fetchRelay(){_fetchRelay=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(params,variables){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:console.log(\"fetching query \".concat(params.name,\" with \").concat(JSON.stringify(variables)));_context.next=3;return FetchGraphQL(params.text,variables);case 3:return _context.abrupt(\"return\",_context.sent);case 4:case\"end\":return _context.stop();}}},_callee);}));return _fetchRelay.apply(this,arguments);}var env=new Environment({network:Network.create(fetchRelay),store:new Store(new RecordSource())});export default env;","map":{"version":3,"sources":["/home/akshay/Atishay/appointy-screening/src/RelayEnvironment.js"],"names":["Environment","Network","RecordSource","Store","FetchGraphQL","fetchRelay","params","variables","console","log","name","JSON","stringify","text","env","network","create","store"],"mappings":"iPAAA,OAASA,WAAT,CAAsBC,OAAtB,CAA+BC,YAA/B,CAA6CC,KAA7C,KAA0D,eAA1D,CACA,MAAOC,CAAAA,YAAP,KAAyB,gBAAzB,C,QAEeC,CAAAA,U,mDAOf;2FAPA,iBAA0BC,MAA1B,CAAkCC,SAAlC,kHACIC,OAAO,CAACC,GAAR,0BACsBH,MAAM,CAACI,IAD7B,kBAC0CC,IAAI,CAACC,SAAL,CAAeL,SAAf,CAD1C,GADJ,sBAIiBH,CAAAA,YAAY,CAACE,MAAM,CAACO,IAAR,CAAcN,SAAd,CAJ7B,6G,6CAQA,GAAMO,CAAAA,GAAG,CAAG,GAAId,CAAAA,WAAJ,CAAgB,CACxBe,OAAO,CAAEd,OAAO,CAACe,MAAR,CAAeX,UAAf,CADe,CAExBY,KAAK,CAAE,GAAId,CAAAA,KAAJ,CAAU,GAAID,CAAAA,YAAJ,EAAV,CAFiB,CAAhB,CAAZ,CAKA,cAAeY,CAAAA,GAAf","sourcesContent":["import { Environment, Network, RecordSource, Store } from \"relay-runtime\";\nimport FetchGraphQL from \"./FetchGraphQL\";\n\nasync function fetchRelay(params, variables) {\n    console.log(\n        `fetching query ${params.name} with ${JSON.stringify(variables)}`\n    );\n    return await FetchGraphQL(params.text, variables);\n}\n\n// Export a singleton instance of Relay Environment conf2igured with our network function:\nconst env = new Environment({\n    network: Network.create(fetchRelay),\n    store: new Store(new RecordSource()),\n});\n\nexport default env;"]},"metadata":{},"sourceType":"module"}