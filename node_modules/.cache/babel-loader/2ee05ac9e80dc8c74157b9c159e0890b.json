{"ast":null,"code":"/* import { useContext , useState } from 'react'; */\nasync function FetchGraphQL(text, variables) {\n  const TOKEN = \"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\"; //put your github token to remove blank screen \n\n  const t = localStorage.getItem(\"token\");\n  console.log(t); // Fetch data from GitHub's GraphQL API:\n\n  const response = await fetch('https://api.github.com/graphql', {\n    method: 'POST',\n    headers: {\n      Authorization: `bearer  ${TOKEN}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: text,\n      variables\n    })\n  }); // Get the response as JSON\n\n  return await response.json();\n}\n\n_c = FetchGraphQL;\nexport default FetchGraphQL;\n\nvar _c;\n\n$RefreshReg$(_c, \"FetchGraphQL\");","map":{"version":3,"sources":["/home/akshay/Atishay/appointy-screening/src/FetchGraphQL.jsx"],"names":["FetchGraphQL","text","variables","TOKEN","t","localStorage","getItem","console","log","response","fetch","method","headers","Authorization","body","JSON","stringify","query","json"],"mappings":"AACA;AACA,eAAeA,YAAf,CAA4BC,IAA5B,EAAkCC,SAAlC,EAA4C;AAE1C,QAAMC,KAAK,GAAG,0CAAd,CAF0C,CAEe;;AACzD,QAAMC,CAAC,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAV;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,CAAZ,EAJ0C,CAK1C;;AACA,QAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAD,EAAmC;AAC7DC,IAAAA,MAAM,EAAE,MADqD;AAE7DC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAG,WAAUV,KAAM,EADzB;AAEP,sBAAgB;AAFT,KAFoD;AAM7DW,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,MAAAA,KAAK,EAAEhB,IADY;AAEnBC,MAAAA;AAFmB,KAAf;AANuD,GAAnC,CAA5B,CAN0C,CAkB1C;;AACA,SAAO,MAAMO,QAAQ,CAACS,IAAT,EAAb;AACD;;KApBclB,Y;AAsBf,eAAeA,YAAf","sourcesContent":["\n/* import { useContext , useState } from 'react'; */\nasync function FetchGraphQL(text, variables){  \n\n  const TOKEN = \"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\";//put your github token to remove blank screen \n  const t = localStorage.getItem(\"token\");\n  console.log(t)\n  // Fetch data from GitHub's GraphQL API:\n  const response = await fetch('https://api.github.com/graphql', {\n    method: 'POST',\n    headers: {\n      Authorization: `bearer  ${TOKEN}`,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      query: text,\n      variables,\n    }),\n  });\n\n  // Get the response as JSON\n  return await response.json();\n}\n\nexport default FetchGraphQL;"]},"metadata":{},"sourceType":"module"}