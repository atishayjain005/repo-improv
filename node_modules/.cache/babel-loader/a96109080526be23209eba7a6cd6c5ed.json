{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelper\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar RelayFeatureFlags = require('../util/RelayFeatureFlags');\n\nvar RelayModernRecord = require('./RelayModernRecord');\n\nvar areEqual = require(\"fbjs/lib/areEqual\");\n\nvar invariant = require('invariant');\n\nvar warning = require(\"fbjs/lib/warning\");\n\nvar _require = require('../multi-actor-environment/ActorUtils'),\n    ACTOR_IDENTIFIER_FIELD_NAME = _require.ACTOR_IDENTIFIER_FIELD_NAME,\n    getActorIdentifierFromPayload = _require.getActorIdentifierFromPayload;\n\nvar _require2 = require('../util/RelayConcreteNode'),\n    ACTOR_CHANGE = _require2.ACTOR_CHANGE,\n    CONDITION = _require2.CONDITION,\n    CLIENT_COMPONENT = _require2.CLIENT_COMPONENT,\n    CLIENT_EXTENSION = _require2.CLIENT_EXTENSION,\n    DEFER = _require2.DEFER,\n    FLIGHT_FIELD = _require2.FLIGHT_FIELD,\n    FRAGMENT_SPREAD = _require2.FRAGMENT_SPREAD,\n    INLINE_FRAGMENT = _require2.INLINE_FRAGMENT,\n    LINKED_FIELD = _require2.LINKED_FIELD,\n    LINKED_HANDLE = _require2.LINKED_HANDLE,\n    MODULE_IMPORT = _require2.MODULE_IMPORT,\n    SCALAR_FIELD = _require2.SCALAR_FIELD,\n    SCALAR_HANDLE = _require2.SCALAR_HANDLE,\n    STREAM = _require2.STREAM,\n    TYPE_DISCRIMINATOR = _require2.TYPE_DISCRIMINATOR;\n\nvar _require3 = require('./ClientID'),\n    generateClientID = _require3.generateClientID,\n    isClientID = _require3.isClientID;\n\nvar _require4 = require('./RelayConcreteVariables'),\n    getLocalVariables = _require4.getLocalVariables;\n\nvar _require5 = require('./RelayModernSelector'),\n    createNormalizationSelector = _require5.createNormalizationSelector;\n\nvar _require6 = require('./RelayStoreReactFlightUtils'),\n    refineToReactFlightPayloadData = _require6.refineToReactFlightPayloadData,\n    REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY = _require6.REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY,\n    REACT_FLIGHT_TREE_STORAGE_KEY = _require6.REACT_FLIGHT_TREE_STORAGE_KEY,\n    REACT_FLIGHT_TYPE_NAME = _require6.REACT_FLIGHT_TYPE_NAME;\n\nvar _require7 = require('./RelayStoreUtils'),\n    getArgumentValues = _require7.getArgumentValues,\n    getHandleStorageKey = _require7.getHandleStorageKey,\n    getModuleComponentKey = _require7.getModuleComponentKey,\n    getModuleOperationKey = _require7.getModuleOperationKey,\n    getStorageKey = _require7.getStorageKey,\n    TYPENAME_KEY = _require7.TYPENAME_KEY,\n    ROOT_ID = _require7.ROOT_ID,\n    ROOT_TYPE = _require7.ROOT_TYPE;\n\nvar _require8 = require('./TypeID'),\n    generateTypeID = _require8.generateTypeID,\n    TYPE_SCHEMA_TYPE = _require8.TYPE_SCHEMA_TYPE;\n/**\n * Normalizes the results of a query and standard GraphQL response, writing the\n * normalized records/fields into the given MutableRecordSource.\n */\n\n\nfunction normalize(recordSource, selector, response, options) {\n  var dataID = selector.dataID,\n      node = selector.node,\n      variables = selector.variables;\n  var normalizer = new RelayResponseNormalizer(recordSource, variables, options);\n  return normalizer.normalizeResponse(node, dataID, response);\n}\n/**\n * @private\n *\n * Helper for handling payloads.\n */\n\n\nvar RelayResponseNormalizer = /*#__PURE__*/function () {\n  function RelayResponseNormalizer(recordSource, variables, options) {\n    this._actorIdentifier = options.actorIdentifier;\n    this._getDataId = options.getDataID;\n    this._handleFieldPayloads = [];\n    this._treatMissingFieldsAsNull = options.treatMissingFieldsAsNull;\n    this._incrementalPlaceholders = [];\n    this._isClientExtension = false;\n    this._isUnmatchedAbstractType = false;\n    this._followupPayloads = [];\n    this._path = options.path ? (0, _toConsumableArray2[\"default\"])(options.path) : [];\n    this._recordSource = recordSource;\n    this._variables = variables;\n    this._reactFlightPayloadDeserializer = options.reactFlightPayloadDeserializer;\n    this._reactFlightServerErrorHandler = options.reactFlightServerErrorHandler;\n    this._shouldProcessClientComponents = options.shouldProcessClientComponents;\n  }\n\n  var _proto = RelayResponseNormalizer.prototype;\n\n  _proto.normalizeResponse = function normalizeResponse(node, dataID, data) {\n    var record = this._recordSource.get(dataID);\n\n    !record ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Expected root record `%s` to exist.', dataID) : invariant(false) : void 0;\n\n    this._traverseSelections(node, record, data);\n\n    return {\n      errors: null,\n      fieldPayloads: this._handleFieldPayloads,\n      incrementalPlaceholders: this._incrementalPlaceholders,\n      followupPayloads: this._followupPayloads,\n      source: this._recordSource,\n      isFinal: false\n    };\n  };\n\n  _proto._getVariableValue = function _getVariableValue(name) {\n    !this._variables.hasOwnProperty(name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Undefined variable `%s`.', name) : invariant(false) : void 0; // $FlowFixMe[cannot-write]\n\n    return this._variables[name];\n  };\n\n  _proto._getRecordType = function _getRecordType(data) {\n    var typeName = data[TYPENAME_KEY];\n    !(typeName != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Expected a typename for record `%s`.', JSON.stringify(data, null, 2)) : invariant(false) : void 0;\n    return typeName;\n  };\n\n  _proto._traverseSelections = function _traverseSelections(node, record, data) {\n    for (var i = 0; i < node.selections.length; i++) {\n      var selection = node.selections[i];\n\n      switch (selection.kind) {\n        case SCALAR_FIELD:\n        case LINKED_FIELD:\n          this._normalizeField(node, selection, record, data);\n\n          break;\n\n        case CONDITION:\n          var conditionValue = Boolean(this._getVariableValue(selection.condition));\n\n          if (conditionValue === selection.passingValue) {\n            this._traverseSelections(selection, record, data);\n          }\n\n          break;\n\n        case FRAGMENT_SPREAD:\n          {\n            var prevVariables = this._variables;\n            this._variables = getLocalVariables(this._variables, selection.fragment.argumentDefinitions, selection.args);\n\n            this._traverseSelections(selection.fragment, record, data);\n\n            this._variables = prevVariables;\n            break;\n          }\n\n        case INLINE_FRAGMENT:\n          {\n            var abstractKey = selection.abstractKey;\n\n            if (abstractKey == null) {\n              var _typeName = RelayModernRecord.getType(record);\n\n              if (_typeName === selection.type) {\n                this._traverseSelections(selection, record, data);\n              }\n            } else {\n              var implementsInterface = data.hasOwnProperty(abstractKey);\n\n              var _typeName2 = RelayModernRecord.getType(record);\n\n              var typeID = generateTypeID(_typeName2);\n\n              var typeRecord = this._recordSource.get(typeID);\n\n              if (typeRecord == null) {\n                typeRecord = RelayModernRecord.create(typeID, TYPE_SCHEMA_TYPE);\n\n                this._recordSource.set(typeID, typeRecord);\n              }\n\n              RelayModernRecord.setValue(typeRecord, abstractKey, implementsInterface);\n\n              if (implementsInterface) {\n                this._traverseSelections(selection, record, data);\n              }\n            }\n\n            break;\n          }\n\n        case TYPE_DISCRIMINATOR:\n          {\n            var _abstractKey = selection.abstractKey;\n\n            var _implementsInterface = data.hasOwnProperty(_abstractKey);\n\n            var _typeName3 = RelayModernRecord.getType(record);\n\n            var _typeID = generateTypeID(_typeName3);\n\n            var _typeRecord = this._recordSource.get(_typeID);\n\n            if (_typeRecord == null) {\n              _typeRecord = RelayModernRecord.create(_typeID, TYPE_SCHEMA_TYPE);\n\n              this._recordSource.set(_typeID, _typeRecord);\n            }\n\n            RelayModernRecord.setValue(_typeRecord, _abstractKey, _implementsInterface);\n            break;\n          }\n\n        case LINKED_HANDLE:\n        case SCALAR_HANDLE:\n          var args = selection.args ? getArgumentValues(selection.args, this._variables) : {};\n          var fieldKey = getStorageKey(selection, this._variables);\n          var handleKey = getHandleStorageKey(selection, this._variables);\n\n          this._handleFieldPayloads.push({\n            /* $FlowFixMe[class-object-subtyping] added when improving typing\n             * for this parameters */\n            args: args,\n            dataID: RelayModernRecord.getDataID(record),\n            fieldKey: fieldKey,\n            handle: selection.handle,\n            handleKey: handleKey,\n            handleArgs: selection.handleArgs ?\n            /* $FlowFixMe[class-object-subtyping] added when improving typing\n             * for this parameters */\n            getArgumentValues(selection.handleArgs, this._variables) : {}\n          });\n\n          break;\n\n        case MODULE_IMPORT:\n          this._normalizeModuleImport(node, selection, record, data);\n\n          break;\n\n        case DEFER:\n          this._normalizeDefer(selection, record, data);\n\n          break;\n\n        case STREAM:\n          this._normalizeStream(selection, record, data);\n\n          break;\n\n        case CLIENT_EXTENSION:\n          var isClientExtension = this._isClientExtension;\n          this._isClientExtension = true;\n\n          this._traverseSelections(selection, record, data);\n\n          this._isClientExtension = isClientExtension;\n          break;\n\n        case CLIENT_COMPONENT:\n          if (this._shouldProcessClientComponents === false) {\n            break;\n          }\n\n          this._traverseSelections(selection.fragment, record, data);\n\n          break;\n\n        case FLIGHT_FIELD:\n          if (RelayFeatureFlags.ENABLE_REACT_FLIGHT_COMPONENT_FIELD) {\n            this._normalizeFlightField(node, selection, record, data);\n          } else {\n            throw new Error('Flight fields are not yet supported.');\n          }\n\n          break;\n\n        case ACTOR_CHANGE:\n          this._normalizeActorChange(node, selection, record, data);\n\n          break;\n\n        default:\n          selection;\n          !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Unexpected ast kind `%s`.', selection.kind) : invariant(false) : void 0;\n      }\n    }\n  };\n\n  _proto._normalizeDefer = function _normalizeDefer(defer, record, data) {\n    var isDeferred = defer[\"if\"] === null || this._getVariableValue(defer[\"if\"]);\n\n    if (process.env.NODE_ENV !== \"production\") {\n      process.env.NODE_ENV !== \"production\" ? warning(typeof isDeferred === 'boolean', 'RelayResponseNormalizer: Expected value for @defer `if` argument to ' + 'be a boolean, got `%s`.', isDeferred) : void 0;\n    }\n\n    if (isDeferred === false) {\n      // If defer is disabled there will be no additional response chunk:\n      // normalize the data already present.\n      this._traverseSelections(defer, record, data);\n    } else {\n      // Otherwise data *for this selection* should not be present: enqueue\n      // metadata to process the subsequent response chunk.\n      this._incrementalPlaceholders.push({\n        kind: 'defer',\n        data: data,\n        label: defer.label,\n        path: (0, _toConsumableArray2[\"default\"])(this._path),\n        selector: createNormalizationSelector(defer, RelayModernRecord.getDataID(record), this._variables),\n        typeName: RelayModernRecord.getType(record),\n        actorIdentifier: this._actorIdentifier\n      });\n    }\n  };\n\n  _proto._normalizeStream = function _normalizeStream(stream, record, data) {\n    // Always normalize regardless of whether streaming is enabled or not,\n    // this populates the initial array value (including any items when\n    // initial_count > 0).\n    this._traverseSelections(stream, record, data);\n\n    var isStreamed = stream[\"if\"] === null || this._getVariableValue(stream[\"if\"]);\n\n    if (process.env.NODE_ENV !== \"production\") {\n      process.env.NODE_ENV !== \"production\" ? warning(typeof isStreamed === 'boolean', 'RelayResponseNormalizer: Expected value for @stream `if` argument ' + 'to be a boolean, got `%s`.', isStreamed) : void 0;\n    }\n\n    if (isStreamed === true) {\n      // If streaming is enabled, *also* emit metadata to process any\n      // response chunks that may be delivered.\n      this._incrementalPlaceholders.push({\n        kind: 'stream',\n        label: stream.label,\n        path: (0, _toConsumableArray2[\"default\"])(this._path),\n        parentID: RelayModernRecord.getDataID(record),\n        node: stream,\n        variables: this._variables,\n        actorIdentifier: this._actorIdentifier\n      });\n    }\n  };\n\n  _proto._normalizeModuleImport = function _normalizeModuleImport(parent, moduleImport, record, data) {\n    !(typeof data === 'object' && data) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected data for @module to be an object.') : invariant(false) : void 0;\n    var typeName = RelayModernRecord.getType(record);\n    var componentKey = getModuleComponentKey(moduleImport.documentName);\n    var componentReference = data[componentKey];\n    RelayModernRecord.setValue(record, componentKey, componentReference !== null && componentReference !== void 0 ? componentReference : null);\n    var operationKey = getModuleOperationKey(moduleImport.documentName);\n    var operationReference = data[operationKey];\n    RelayModernRecord.setValue(record, operationKey, operationReference !== null && operationReference !== void 0 ? operationReference : null);\n\n    if (operationReference != null) {\n      this._followupPayloads.push({\n        kind: 'ModuleImportPayload',\n        args: moduleImport.args,\n        data: data,\n        dataID: RelayModernRecord.getDataID(record),\n        operationReference: operationReference,\n        path: (0, _toConsumableArray2[\"default\"])(this._path),\n        typeName: typeName,\n        variables: this._variables,\n        actorIdentifier: this._actorIdentifier\n      });\n    }\n  };\n\n  _proto._normalizeField = function _normalizeField(parent, selection, record, data) {\n    !(typeof data === 'object' && data) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'writeField(): Expected data for field `%s` to be an object.', selection.name) : invariant(false) : void 0;\n    var responseKey = selection.alias || selection.name;\n    var storageKey = getStorageKey(selection, this._variables);\n    var fieldValue = data[responseKey];\n\n    if (fieldValue == null) {\n      if (fieldValue === undefined) {\n        // Fields may be missing in the response in two main cases:\n        // - Inside a client extension: the server will not generally return\n        //   values for these fields, but a local update may provide them.\n        // - Inside an abstract type refinement where the concrete type does\n        //   not conform to the interface/union.\n        // However an otherwise-required field may also be missing if the server\n        // is configured to skip fields with `null` values, in which case the\n        // client is assumed to be correctly configured with\n        // treatMissingFieldsAsNull=true.\n        var isOptionalField = this._isClientExtension || this._isUnmatchedAbstractType;\n\n        if (isOptionalField) {\n          // Field not expected to exist regardless of whether the server is pruning null\n          // fields or not.\n          return;\n        } else if (!this._treatMissingFieldsAsNull) {\n          // Not optional and the server is not pruning null fields: field is expected\n          // to be present\n          if (process.env.NODE_ENV !== \"production\") {\n            process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayResponseNormalizer: Payload did not contain a value ' + 'for field `%s: %s`. Check that you are parsing with the same ' + 'query that was used to fetch the payload.', responseKey, storageKey) : void 0;\n          }\n\n          return;\n        }\n      }\n\n      if (process.env.NODE_ENV !== \"production\") {\n        if (selection.kind === SCALAR_FIELD) {\n          this._validateConflictingFieldsWithIdenticalId(record, storageKey, fieldValue);\n        }\n      }\n\n      RelayModernRecord.setValue(record, storageKey, null);\n      return;\n    }\n\n    if (selection.kind === SCALAR_FIELD) {\n      if (process.env.NODE_ENV !== \"production\") {\n        this._validateConflictingFieldsWithIdenticalId(record, storageKey, fieldValue);\n      }\n\n      RelayModernRecord.setValue(record, storageKey, fieldValue);\n    } else if (selection.kind === LINKED_FIELD) {\n      this._path.push(responseKey);\n\n      if (selection.plural) {\n        this._normalizePluralLink(selection, record, storageKey, fieldValue);\n      } else {\n        this._normalizeLink(selection, record, storageKey, fieldValue);\n      }\n\n      this._path.pop();\n    } else {\n      selection;\n      !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Unexpected ast kind `%s` during normalization.', selection.kind) : invariant(false) : void 0;\n    }\n  };\n\n  _proto._normalizeActorChange = function _normalizeActorChange(parent, selection, record, data) {\n    var _field$concreteType;\n\n    var field = selection.linkedField;\n    !(typeof data === 'object' && data) ? process.env.NODE_ENV !== \"production\" ? invariant(false, '_normalizeActorChange(): Expected data for field `%s` to be an object.', field.name) : invariant(false) : void 0;\n    var responseKey = field.alias || field.name;\n    var storageKey = getStorageKey(field, this._variables);\n    var fieldValue = data[responseKey];\n\n    if (fieldValue == null) {\n      if (fieldValue === undefined) {\n        var isOptionalField = this._isClientExtension || this._isUnmatchedAbstractType;\n\n        if (isOptionalField) {\n          return;\n        } else if (!this._treatMissingFieldsAsNull) {\n          if (process.env.NODE_ENV !== \"production\") {\n            process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayResponseNormalizer: Payload did not contain a value ' + 'for field `%s: %s`. Check that you are parsing with the same ' + 'query that was used to fetch the payload.', responseKey, storageKey) : void 0;\n          }\n\n          return;\n        }\n      }\n\n      RelayModernRecord.setValue(record, storageKey, null);\n      return;\n    }\n\n    var actorIdentifier = getActorIdentifierFromPayload(fieldValue);\n\n    if (actorIdentifier == null) {\n      if (process.env.NODE_ENV !== \"production\") {\n        process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayResponseNormalizer: Payload did not contain a value ' + 'for field `%s`. Check that you are parsing with the same ' + 'query that was used to fetch the payload. Payload is `%s`.', ACTOR_IDENTIFIER_FIELD_NAME, JSON.stringify(fieldValue, null, 2)) : void 0;\n      }\n\n      RelayModernRecord.setValue(record, storageKey, null);\n      return;\n    } // $FlowFixMe[incompatible-call]\n\n\n    var typeName = (_field$concreteType = field.concreteType) !== null && _field$concreteType !== void 0 ? _field$concreteType : this._getRecordType(fieldValue);\n    var nextID = this._getDataId( // $FlowFixMe[incompatible-call]\n    fieldValue, typeName) || RelayModernRecord.getLinkedRecordID(record, storageKey) || generateClientID(RelayModernRecord.getDataID(record), storageKey);\n    !(typeof nextID === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected id on field `%s` to be a string.', storageKey) : invariant(false) : void 0;\n    RelayModernRecord.setActorLinkedRecordID(record, storageKey, actorIdentifier, nextID);\n\n    this._followupPayloads.push({\n      kind: 'ActorPayload',\n      data: fieldValue,\n      dataID: nextID,\n      path: [].concat((0, _toConsumableArray2[\"default\"])(this._path), [responseKey]),\n      typeName: typeName,\n      variables: this._variables,\n      node: field,\n      actorIdentifier: actorIdentifier\n    });\n  };\n\n  _proto._normalizeFlightField = function _normalizeFlightField(parent, selection, record, data) {\n    var responseKey = selection.alias || selection.name;\n    var storageKey = getStorageKey(selection, this._variables);\n    var fieldValue = data[responseKey];\n\n    if (fieldValue == null) {\n      if (fieldValue === undefined) {\n        // Flight field may be missing in the response if:\n        // - It is inside an abstract type refinement where the concrete type does\n        //   not conform to the interface/union.\n        // However an otherwise-required field may also be missing if the server\n        // is configured to skip fields with `null` values, in which case the\n        // client is assumed to be correctly configured with\n        // treatMissingFieldsAsNull=true.\n        if (this._isUnmatchedAbstractType) {\n          // Field not expected to exist regardless of whether the server is pruning null\n          // fields or not.\n          return;\n        } else {\n          // Not optional and the server is not pruning null fields: field is expected\n          // to be present\n          !this._treatMissingFieldsAsNull ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Payload did not contain a value for ' + 'field `%s: %s`. Check that you are parsing with the same ' + 'query that was used to fetch the payload.', responseKey, storageKey) : invariant(false) : void 0;\n        }\n      }\n\n      RelayModernRecord.setValue(record, storageKey, null);\n      return;\n    }\n\n    var reactFlightPayload = refineToReactFlightPayloadData(fieldValue);\n    var reactFlightPayloadDeserializer = this._reactFlightPayloadDeserializer;\n    !(reactFlightPayload != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected React Flight payload data to be an ' + 'object with `status`, tree`, `queries` and `errors` properties, got ' + '`%s`.', fieldValue) : invariant(false) : void 0;\n    !(typeof reactFlightPayloadDeserializer === 'function') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected reactFlightPayloadDeserializer to ' + 'be a function, got `%s`.', reactFlightPayloadDeserializer) : invariant(false) : void 0;\n\n    if (reactFlightPayload.errors.length > 0) {\n      if (typeof this._reactFlightServerErrorHandler === 'function') {\n        this._reactFlightServerErrorHandler(reactFlightPayload.status, reactFlightPayload.errors);\n      } else {\n        process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayResponseNormalizer: Received server errors for field `%s`.\\n\\n' + '%s\\n%s', responseKey, reactFlightPayload.errors[0].message, reactFlightPayload.errors[0].stack) : void 0;\n      }\n    }\n\n    var reactFlightID = generateClientID(RelayModernRecord.getDataID(record), getStorageKey(selection, this._variables));\n\n    var reactFlightClientResponseRecord = this._recordSource.get(reactFlightID);\n\n    if (reactFlightClientResponseRecord == null) {\n      reactFlightClientResponseRecord = RelayModernRecord.create(reactFlightID, REACT_FLIGHT_TYPE_NAME);\n\n      this._recordSource.set(reactFlightID, reactFlightClientResponseRecord);\n    }\n\n    if (reactFlightPayload.tree == null) {\n      // This typically indicates that a fatal server error prevented rows from\n      // being written. When this occurs, we should not continue normalization of\n      // the Flight field because the row response is malformed.\n      //\n      // Receiving empty rows is OK because it can indicate the start of a stream.\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayResponseNormalizer: Expected `tree` not to be null. This ' + 'typically indicates that a fatal server error prevented any Server ' + 'Component rows from being written.') : void 0; // We create the flight record with a null value for the tree\n      // and empty reachable definitions\n\n      RelayModernRecord.setValue(reactFlightClientResponseRecord, REACT_FLIGHT_TREE_STORAGE_KEY, null);\n      RelayModernRecord.setValue(reactFlightClientResponseRecord, REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY, []);\n      RelayModernRecord.setLinkedRecordID(record, storageKey, reactFlightID);\n      return;\n    } // We store the deserialized reactFlightClientResponse in a separate\n    // record and link it to the parent record. This is so we can GC the Flight\n    // tree later even if the parent record is still reachable.\n\n\n    var reactFlightClientResponse = reactFlightPayloadDeserializer(reactFlightPayload.tree);\n    RelayModernRecord.setValue(reactFlightClientResponseRecord, REACT_FLIGHT_TREE_STORAGE_KEY, reactFlightClientResponse);\n    var reachableExecutableDefinitions = [];\n\n    var _iterator = (0, _createForOfIteratorHelper2[\"default\"])(reactFlightPayload.queries),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var query = _step.value;\n\n        if (query.response.data != null) {\n          this._followupPayloads.push({\n            kind: 'ModuleImportPayload',\n            args: null,\n            data: query.response.data,\n            dataID: ROOT_ID,\n            operationReference: query.module,\n            path: [],\n            typeName: ROOT_TYPE,\n            variables: query.variables,\n            actorIdentifier: this._actorIdentifier\n          });\n        }\n\n        reachableExecutableDefinitions.push({\n          module: query.module,\n          variables: query.variables\n        });\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    var _iterator2 = (0, _createForOfIteratorHelper2[\"default\"])(reactFlightPayload.fragments),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var fragment = _step2.value;\n\n        if (fragment.response.data != null) {\n          this._followupPayloads.push({\n            kind: 'ModuleImportPayload',\n            args: null,\n            data: fragment.response.data,\n            dataID: fragment.__id,\n            operationReference: fragment.module,\n            path: [],\n            typeName: fragment.__typename,\n            variables: fragment.variables,\n            actorIdentifier: this._actorIdentifier\n          });\n        }\n\n        reachableExecutableDefinitions.push({\n          module: fragment.module,\n          variables: fragment.variables\n        });\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    RelayModernRecord.setValue(reactFlightClientResponseRecord, REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY, reachableExecutableDefinitions);\n    RelayModernRecord.setLinkedRecordID(record, storageKey, reactFlightID);\n  };\n\n  _proto._normalizeLink = function _normalizeLink(field, record, storageKey, fieldValue) {\n    var _field$concreteType2;\n\n    !(typeof fieldValue === 'object' && fieldValue) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected data for field `%s` to be an object.', storageKey) : invariant(false) : void 0;\n    var nextID = this._getDataId( // $FlowFixMe[incompatible-variance]\n    fieldValue, // $FlowFixMe[incompatible-variance]\n    (_field$concreteType2 = field.concreteType) !== null && _field$concreteType2 !== void 0 ? _field$concreteType2 : this._getRecordType(fieldValue)) || // Reuse previously generated client IDs\n    RelayModernRecord.getLinkedRecordID(record, storageKey) || generateClientID(RelayModernRecord.getDataID(record), storageKey);\n    !(typeof nextID === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected id on field `%s` to be a string.', storageKey) : invariant(false) : void 0;\n\n    if (process.env.NODE_ENV !== \"production\") {\n      this._validateConflictingLinkedFieldsWithIdenticalId(record, RelayModernRecord.getLinkedRecordID(record, storageKey), nextID, storageKey);\n    }\n\n    RelayModernRecord.setLinkedRecordID(record, storageKey, nextID);\n\n    var nextRecord = this._recordSource.get(nextID);\n\n    if (!nextRecord) {\n      // $FlowFixMe[incompatible-variance]\n      var _typeName4 = field.concreteType || this._getRecordType(fieldValue);\n\n      nextRecord = RelayModernRecord.create(nextID, _typeName4);\n\n      this._recordSource.set(nextID, nextRecord);\n    } else if (process.env.NODE_ENV !== \"production\") {\n      this._validateRecordType(nextRecord, field, fieldValue);\n    } // $FlowFixMe[incompatible-variance]\n\n\n    this._traverseSelections(field, nextRecord, fieldValue);\n  };\n\n  _proto._normalizePluralLink = function _normalizePluralLink(field, record, storageKey, fieldValue) {\n    var _this = this;\n\n    !Array.isArray(fieldValue) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected data for field `%s` to be an array ' + 'of objects.', storageKey) : invariant(false) : void 0;\n    var prevIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);\n    var nextIDs = [];\n    fieldValue.forEach(function (item, nextIndex) {\n      var _field$concreteType3; // validate response data\n\n\n      if (item == null) {\n        nextIDs.push(item);\n        return;\n      }\n\n      _this._path.push(String(nextIndex));\n\n      !(typeof item === 'object') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected elements for field `%s` to be ' + 'objects.', storageKey) : invariant(false) : void 0;\n      var nextID = _this._getDataId( // $FlowFixMe[incompatible-variance]\n      item, // $FlowFixMe[incompatible-variance]\n      (_field$concreteType3 = field.concreteType) !== null && _field$concreteType3 !== void 0 ? _field$concreteType3 : _this._getRecordType(item)) || prevIDs && prevIDs[nextIndex] || // Reuse previously generated client IDs:\n      generateClientID(RelayModernRecord.getDataID(record), storageKey, nextIndex);\n      !(typeof nextID === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected id of elements of field `%s` to ' + 'be strings.', storageKey) : invariant(false) : void 0;\n      nextIDs.push(nextID);\n\n      var nextRecord = _this._recordSource.get(nextID);\n\n      if (!nextRecord) {\n        // $FlowFixMe[incompatible-variance]\n        var _typeName5 = field.concreteType || _this._getRecordType(item);\n\n        nextRecord = RelayModernRecord.create(nextID, _typeName5);\n\n        _this._recordSource.set(nextID, nextRecord);\n      } else if (process.env.NODE_ENV !== \"production\") {\n        _this._validateRecordType(nextRecord, field, item);\n      } // NOTE: the check to strip __DEV__ code only works for simple\n      // `if (__DEV__)`\n\n\n      if (process.env.NODE_ENV !== \"production\") {\n        if (prevIDs) {\n          _this._validateConflictingLinkedFieldsWithIdenticalId(record, prevIDs[nextIndex], nextID, storageKey);\n        }\n      } // $FlowFixMe[incompatible-variance]\n\n\n      _this._traverseSelections(field, nextRecord, item);\n\n      _this._path.pop();\n    });\n    RelayModernRecord.setLinkedRecordIDs(record, storageKey, nextIDs);\n  }\n  /**\n   * Warns if the type of the record does not match the type of the field/payload.\n   */\n  ;\n\n  _proto._validateRecordType = function _validateRecordType(record, field, payload) {\n    var _field$concreteType4;\n\n    var typeName = (_field$concreteType4 = field.concreteType) !== null && _field$concreteType4 !== void 0 ? _field$concreteType4 : this._getRecordType(payload);\n    var dataID = RelayModernRecord.getDataID(record);\n    process.env.NODE_ENV !== \"production\" ? warning(isClientID(dataID) && dataID !== ROOT_ID || RelayModernRecord.getType(record) === typeName, 'RelayResponseNormalizer: Invalid record `%s`. Expected %s to be ' + 'consistent, but the record was assigned conflicting types `%s` ' + 'and `%s`. The GraphQL server likely violated the globally unique ' + 'id requirement by returning the same id for different objects.', dataID, TYPENAME_KEY, RelayModernRecord.getType(record), typeName) : void 0;\n  }\n  /**\n   * Warns if a single response contains conflicting fields with the same id\n   */\n  ;\n\n  _proto._validateConflictingFieldsWithIdenticalId = function _validateConflictingFieldsWithIdenticalId(record, storageKey, fieldValue) {\n    // NOTE: Only call this function in DEV\n    if (process.env.NODE_ENV !== \"production\") {\n      var dataID = RelayModernRecord.getDataID(record);\n      var previousValue = RelayModernRecord.getValue(record, storageKey);\n      process.env.NODE_ENV !== \"production\" ? warning(storageKey === TYPENAME_KEY || previousValue === undefined || areEqual(previousValue, fieldValue), 'RelayResponseNormalizer: Invalid record. The record contains two ' + 'instances of the same id: `%s` with conflicting field, %s and its values: %s and %s. ' + 'If two fields are different but share ' + 'the same id, one field will overwrite the other.', dataID, storageKey, previousValue, fieldValue) : void 0;\n    }\n  }\n  /**\n   * Warns if a single response contains conflicting fields with the same id\n   */\n  ;\n\n  _proto._validateConflictingLinkedFieldsWithIdenticalId = function _validateConflictingLinkedFieldsWithIdenticalId(record, prevID, nextID, storageKey) {\n    // NOTE: Only call this function in DEV\n    if (process.env.NODE_ENV !== \"production\") {\n      process.env.NODE_ENV !== \"production\" ? warning(prevID === undefined || prevID === nextID, 'RelayResponseNormalizer: Invalid record. The record contains ' + 'references to the conflicting field, %s and its id values: %s and %s. ' + 'We need to make sure that the record the field points ' + 'to remains consistent or one field will overwrite the other.', storageKey, prevID, nextID) : void 0;\n    }\n  };\n\n  return RelayResponseNormalizer;\n}();\n\nmodule.exports = {\n  normalize: normalize\n};","map":{"version":3,"sources":["/home/akshay/Atishay/appointy-screening/node_modules/relay-runtime/lib/store/RelayResponseNormalizer.js"],"names":["_interopRequireDefault","require","_createForOfIteratorHelper2","_toConsumableArray2","RelayFeatureFlags","RelayModernRecord","areEqual","invariant","warning","_require","ACTOR_IDENTIFIER_FIELD_NAME","getActorIdentifierFromPayload","_require2","ACTOR_CHANGE","CONDITION","CLIENT_COMPONENT","CLIENT_EXTENSION","DEFER","FLIGHT_FIELD","FRAGMENT_SPREAD","INLINE_FRAGMENT","LINKED_FIELD","LINKED_HANDLE","MODULE_IMPORT","SCALAR_FIELD","SCALAR_HANDLE","STREAM","TYPE_DISCRIMINATOR","_require3","generateClientID","isClientID","_require4","getLocalVariables","_require5","createNormalizationSelector","_require6","refineToReactFlightPayloadData","REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY","REACT_FLIGHT_TREE_STORAGE_KEY","REACT_FLIGHT_TYPE_NAME","_require7","getArgumentValues","getHandleStorageKey","getModuleComponentKey","getModuleOperationKey","getStorageKey","TYPENAME_KEY","ROOT_ID","ROOT_TYPE","_require8","generateTypeID","TYPE_SCHEMA_TYPE","normalize","recordSource","selector","response","options","dataID","node","variables","normalizer","RelayResponseNormalizer","normalizeResponse","_actorIdentifier","actorIdentifier","_getDataId","getDataID","_handleFieldPayloads","_treatMissingFieldsAsNull","treatMissingFieldsAsNull","_incrementalPlaceholders","_isClientExtension","_isUnmatchedAbstractType","_followupPayloads","_path","path","_recordSource","_variables","_reactFlightPayloadDeserializer","reactFlightPayloadDeserializer","_reactFlightServerErrorHandler","reactFlightServerErrorHandler","_shouldProcessClientComponents","shouldProcessClientComponents","_proto","prototype","data","record","get","process","env","NODE_ENV","_traverseSelections","errors","fieldPayloads","incrementalPlaceholders","followupPayloads","source","isFinal","_getVariableValue","name","hasOwnProperty","_getRecordType","typeName","JSON","stringify","i","selections","length","selection","kind","_normalizeField","conditionValue","Boolean","condition","passingValue","prevVariables","fragment","argumentDefinitions","args","abstractKey","_typeName","getType","type","implementsInterface","_typeName2","typeID","typeRecord","create","set","setValue","_abstractKey","_implementsInterface","_typeName3","_typeID","_typeRecord","fieldKey","handleKey","push","handle","handleArgs","_normalizeModuleImport","_normalizeDefer","_normalizeStream","isClientExtension","ENABLE_REACT_FLIGHT_COMPONENT_FIELD","_normalizeFlightField","Error","_normalizeActorChange","defer","isDeferred","label","stream","isStreamed","parentID","parent","moduleImport","componentKey","documentName","componentReference","operationKey","operationReference","responseKey","alias","storageKey","fieldValue","undefined","isOptionalField","_validateConflictingFieldsWithIdenticalId","plural","_normalizePluralLink","_normalizeLink","pop","_field$concreteType","field","linkedField","concreteType","nextID","getLinkedRecordID","setActorLinkedRecordID","concat","reactFlightPayload","status","message","stack","reactFlightID","reactFlightClientResponseRecord","tree","setLinkedRecordID","reactFlightClientResponse","reachableExecutableDefinitions","_iterator","queries","_step","s","n","done","query","value","module","err","e","f","_iterator2","fragments","_step2","__id","__typename","_field$concreteType2","_validateConflictingLinkedFieldsWithIdenticalId","nextRecord","_typeName4","_validateRecordType","_this","Array","isArray","prevIDs","getLinkedRecordIDs","nextIDs","forEach","item","nextIndex","_field$concreteType3","String","_typeName5","setLinkedRecordIDs","payload","_field$concreteType4","previousValue","getValue","prevID","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelper\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar RelayFeatureFlags = require('../util/RelayFeatureFlags');\n\nvar RelayModernRecord = require('./RelayModernRecord');\n\nvar areEqual = require(\"fbjs/lib/areEqual\");\n\nvar invariant = require('invariant');\n\nvar warning = require(\"fbjs/lib/warning\");\n\nvar _require = require('../multi-actor-environment/ActorUtils'),\n    ACTOR_IDENTIFIER_FIELD_NAME = _require.ACTOR_IDENTIFIER_FIELD_NAME,\n    getActorIdentifierFromPayload = _require.getActorIdentifierFromPayload;\n\nvar _require2 = require('../util/RelayConcreteNode'),\n    ACTOR_CHANGE = _require2.ACTOR_CHANGE,\n    CONDITION = _require2.CONDITION,\n    CLIENT_COMPONENT = _require2.CLIENT_COMPONENT,\n    CLIENT_EXTENSION = _require2.CLIENT_EXTENSION,\n    DEFER = _require2.DEFER,\n    FLIGHT_FIELD = _require2.FLIGHT_FIELD,\n    FRAGMENT_SPREAD = _require2.FRAGMENT_SPREAD,\n    INLINE_FRAGMENT = _require2.INLINE_FRAGMENT,\n    LINKED_FIELD = _require2.LINKED_FIELD,\n    LINKED_HANDLE = _require2.LINKED_HANDLE,\n    MODULE_IMPORT = _require2.MODULE_IMPORT,\n    SCALAR_FIELD = _require2.SCALAR_FIELD,\n    SCALAR_HANDLE = _require2.SCALAR_HANDLE,\n    STREAM = _require2.STREAM,\n    TYPE_DISCRIMINATOR = _require2.TYPE_DISCRIMINATOR;\n\nvar _require3 = require('./ClientID'),\n    generateClientID = _require3.generateClientID,\n    isClientID = _require3.isClientID;\n\nvar _require4 = require('./RelayConcreteVariables'),\n    getLocalVariables = _require4.getLocalVariables;\n\nvar _require5 = require('./RelayModernSelector'),\n    createNormalizationSelector = _require5.createNormalizationSelector;\n\nvar _require6 = require('./RelayStoreReactFlightUtils'),\n    refineToReactFlightPayloadData = _require6.refineToReactFlightPayloadData,\n    REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY = _require6.REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY,\n    REACT_FLIGHT_TREE_STORAGE_KEY = _require6.REACT_FLIGHT_TREE_STORAGE_KEY,\n    REACT_FLIGHT_TYPE_NAME = _require6.REACT_FLIGHT_TYPE_NAME;\n\nvar _require7 = require('./RelayStoreUtils'),\n    getArgumentValues = _require7.getArgumentValues,\n    getHandleStorageKey = _require7.getHandleStorageKey,\n    getModuleComponentKey = _require7.getModuleComponentKey,\n    getModuleOperationKey = _require7.getModuleOperationKey,\n    getStorageKey = _require7.getStorageKey,\n    TYPENAME_KEY = _require7.TYPENAME_KEY,\n    ROOT_ID = _require7.ROOT_ID,\n    ROOT_TYPE = _require7.ROOT_TYPE;\n\nvar _require8 = require('./TypeID'),\n    generateTypeID = _require8.generateTypeID,\n    TYPE_SCHEMA_TYPE = _require8.TYPE_SCHEMA_TYPE;\n\n/**\n * Normalizes the results of a query and standard GraphQL response, writing the\n * normalized records/fields into the given MutableRecordSource.\n */\nfunction normalize(recordSource, selector, response, options) {\n  var dataID = selector.dataID,\n      node = selector.node,\n      variables = selector.variables;\n  var normalizer = new RelayResponseNormalizer(recordSource, variables, options);\n  return normalizer.normalizeResponse(node, dataID, response);\n}\n/**\n * @private\n *\n * Helper for handling payloads.\n */\n\n\nvar RelayResponseNormalizer = /*#__PURE__*/function () {\n  function RelayResponseNormalizer(recordSource, variables, options) {\n    this._actorIdentifier = options.actorIdentifier;\n    this._getDataId = options.getDataID;\n    this._handleFieldPayloads = [];\n    this._treatMissingFieldsAsNull = options.treatMissingFieldsAsNull;\n    this._incrementalPlaceholders = [];\n    this._isClientExtension = false;\n    this._isUnmatchedAbstractType = false;\n    this._followupPayloads = [];\n    this._path = options.path ? (0, _toConsumableArray2[\"default\"])(options.path) : [];\n    this._recordSource = recordSource;\n    this._variables = variables;\n    this._reactFlightPayloadDeserializer = options.reactFlightPayloadDeserializer;\n    this._reactFlightServerErrorHandler = options.reactFlightServerErrorHandler;\n    this._shouldProcessClientComponents = options.shouldProcessClientComponents;\n  }\n\n  var _proto = RelayResponseNormalizer.prototype;\n\n  _proto.normalizeResponse = function normalizeResponse(node, dataID, data) {\n    var record = this._recordSource.get(dataID);\n\n    !record ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Expected root record `%s` to exist.', dataID) : invariant(false) : void 0;\n\n    this._traverseSelections(node, record, data);\n\n    return {\n      errors: null,\n      fieldPayloads: this._handleFieldPayloads,\n      incrementalPlaceholders: this._incrementalPlaceholders,\n      followupPayloads: this._followupPayloads,\n      source: this._recordSource,\n      isFinal: false\n    };\n  };\n\n  _proto._getVariableValue = function _getVariableValue(name) {\n    !this._variables.hasOwnProperty(name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Undefined variable `%s`.', name) : invariant(false) : void 0; // $FlowFixMe[cannot-write]\n\n    return this._variables[name];\n  };\n\n  _proto._getRecordType = function _getRecordType(data) {\n    var typeName = data[TYPENAME_KEY];\n    !(typeName != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Expected a typename for record `%s`.', JSON.stringify(data, null, 2)) : invariant(false) : void 0;\n    return typeName;\n  };\n\n  _proto._traverseSelections = function _traverseSelections(node, record, data) {\n    for (var i = 0; i < node.selections.length; i++) {\n      var selection = node.selections[i];\n\n      switch (selection.kind) {\n        case SCALAR_FIELD:\n        case LINKED_FIELD:\n          this._normalizeField(node, selection, record, data);\n\n          break;\n\n        case CONDITION:\n          var conditionValue = Boolean(this._getVariableValue(selection.condition));\n\n          if (conditionValue === selection.passingValue) {\n            this._traverseSelections(selection, record, data);\n          }\n\n          break;\n\n        case FRAGMENT_SPREAD:\n          {\n            var prevVariables = this._variables;\n            this._variables = getLocalVariables(this._variables, selection.fragment.argumentDefinitions, selection.args);\n\n            this._traverseSelections(selection.fragment, record, data);\n\n            this._variables = prevVariables;\n            break;\n          }\n\n        case INLINE_FRAGMENT:\n          {\n            var abstractKey = selection.abstractKey;\n\n            if (abstractKey == null) {\n              var _typeName = RelayModernRecord.getType(record);\n\n              if (_typeName === selection.type) {\n                this._traverseSelections(selection, record, data);\n              }\n            } else {\n              var implementsInterface = data.hasOwnProperty(abstractKey);\n\n              var _typeName2 = RelayModernRecord.getType(record);\n\n              var typeID = generateTypeID(_typeName2);\n\n              var typeRecord = this._recordSource.get(typeID);\n\n              if (typeRecord == null) {\n                typeRecord = RelayModernRecord.create(typeID, TYPE_SCHEMA_TYPE);\n\n                this._recordSource.set(typeID, typeRecord);\n              }\n\n              RelayModernRecord.setValue(typeRecord, abstractKey, implementsInterface);\n\n              if (implementsInterface) {\n                this._traverseSelections(selection, record, data);\n              }\n            }\n\n            break;\n          }\n\n        case TYPE_DISCRIMINATOR:\n          {\n            var _abstractKey = selection.abstractKey;\n\n            var _implementsInterface = data.hasOwnProperty(_abstractKey);\n\n            var _typeName3 = RelayModernRecord.getType(record);\n\n            var _typeID = generateTypeID(_typeName3);\n\n            var _typeRecord = this._recordSource.get(_typeID);\n\n            if (_typeRecord == null) {\n              _typeRecord = RelayModernRecord.create(_typeID, TYPE_SCHEMA_TYPE);\n\n              this._recordSource.set(_typeID, _typeRecord);\n            }\n\n            RelayModernRecord.setValue(_typeRecord, _abstractKey, _implementsInterface);\n            break;\n          }\n\n        case LINKED_HANDLE:\n        case SCALAR_HANDLE:\n          var args = selection.args ? getArgumentValues(selection.args, this._variables) : {};\n          var fieldKey = getStorageKey(selection, this._variables);\n          var handleKey = getHandleStorageKey(selection, this._variables);\n\n          this._handleFieldPayloads.push({\n            /* $FlowFixMe[class-object-subtyping] added when improving typing\n             * for this parameters */\n            args: args,\n            dataID: RelayModernRecord.getDataID(record),\n            fieldKey: fieldKey,\n            handle: selection.handle,\n            handleKey: handleKey,\n            handleArgs: selection.handleArgs ?\n            /* $FlowFixMe[class-object-subtyping] added when improving typing\n             * for this parameters */\n            getArgumentValues(selection.handleArgs, this._variables) : {}\n          });\n\n          break;\n\n        case MODULE_IMPORT:\n          this._normalizeModuleImport(node, selection, record, data);\n\n          break;\n\n        case DEFER:\n          this._normalizeDefer(selection, record, data);\n\n          break;\n\n        case STREAM:\n          this._normalizeStream(selection, record, data);\n\n          break;\n\n        case CLIENT_EXTENSION:\n          var isClientExtension = this._isClientExtension;\n          this._isClientExtension = true;\n\n          this._traverseSelections(selection, record, data);\n\n          this._isClientExtension = isClientExtension;\n          break;\n\n        case CLIENT_COMPONENT:\n          if (this._shouldProcessClientComponents === false) {\n            break;\n          }\n\n          this._traverseSelections(selection.fragment, record, data);\n\n          break;\n\n        case FLIGHT_FIELD:\n          if (RelayFeatureFlags.ENABLE_REACT_FLIGHT_COMPONENT_FIELD) {\n            this._normalizeFlightField(node, selection, record, data);\n          } else {\n            throw new Error('Flight fields are not yet supported.');\n          }\n\n          break;\n\n        case ACTOR_CHANGE:\n          this._normalizeActorChange(node, selection, record, data);\n\n          break;\n\n        default:\n          selection;\n          !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Unexpected ast kind `%s`.', selection.kind) : invariant(false) : void 0;\n      }\n    }\n  };\n\n  _proto._normalizeDefer = function _normalizeDefer(defer, record, data) {\n    var isDeferred = defer[\"if\"] === null || this._getVariableValue(defer[\"if\"]);\n\n    if (process.env.NODE_ENV !== \"production\") {\n      process.env.NODE_ENV !== \"production\" ? warning(typeof isDeferred === 'boolean', 'RelayResponseNormalizer: Expected value for @defer `if` argument to ' + 'be a boolean, got `%s`.', isDeferred) : void 0;\n    }\n\n    if (isDeferred === false) {\n      // If defer is disabled there will be no additional response chunk:\n      // normalize the data already present.\n      this._traverseSelections(defer, record, data);\n    } else {\n      // Otherwise data *for this selection* should not be present: enqueue\n      // metadata to process the subsequent response chunk.\n      this._incrementalPlaceholders.push({\n        kind: 'defer',\n        data: data,\n        label: defer.label,\n        path: (0, _toConsumableArray2[\"default\"])(this._path),\n        selector: createNormalizationSelector(defer, RelayModernRecord.getDataID(record), this._variables),\n        typeName: RelayModernRecord.getType(record),\n        actorIdentifier: this._actorIdentifier\n      });\n    }\n  };\n\n  _proto._normalizeStream = function _normalizeStream(stream, record, data) {\n    // Always normalize regardless of whether streaming is enabled or not,\n    // this populates the initial array value (including any items when\n    // initial_count > 0).\n    this._traverseSelections(stream, record, data);\n\n    var isStreamed = stream[\"if\"] === null || this._getVariableValue(stream[\"if\"]);\n\n    if (process.env.NODE_ENV !== \"production\") {\n      process.env.NODE_ENV !== \"production\" ? warning(typeof isStreamed === 'boolean', 'RelayResponseNormalizer: Expected value for @stream `if` argument ' + 'to be a boolean, got `%s`.', isStreamed) : void 0;\n    }\n\n    if (isStreamed === true) {\n      // If streaming is enabled, *also* emit metadata to process any\n      // response chunks that may be delivered.\n      this._incrementalPlaceholders.push({\n        kind: 'stream',\n        label: stream.label,\n        path: (0, _toConsumableArray2[\"default\"])(this._path),\n        parentID: RelayModernRecord.getDataID(record),\n        node: stream,\n        variables: this._variables,\n        actorIdentifier: this._actorIdentifier\n      });\n    }\n  };\n\n  _proto._normalizeModuleImport = function _normalizeModuleImport(parent, moduleImport, record, data) {\n    !(typeof data === 'object' && data) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected data for @module to be an object.') : invariant(false) : void 0;\n    var typeName = RelayModernRecord.getType(record);\n    var componentKey = getModuleComponentKey(moduleImport.documentName);\n    var componentReference = data[componentKey];\n    RelayModernRecord.setValue(record, componentKey, componentReference !== null && componentReference !== void 0 ? componentReference : null);\n    var operationKey = getModuleOperationKey(moduleImport.documentName);\n    var operationReference = data[operationKey];\n    RelayModernRecord.setValue(record, operationKey, operationReference !== null && operationReference !== void 0 ? operationReference : null);\n\n    if (operationReference != null) {\n      this._followupPayloads.push({\n        kind: 'ModuleImportPayload',\n        args: moduleImport.args,\n        data: data,\n        dataID: RelayModernRecord.getDataID(record),\n        operationReference: operationReference,\n        path: (0, _toConsumableArray2[\"default\"])(this._path),\n        typeName: typeName,\n        variables: this._variables,\n        actorIdentifier: this._actorIdentifier\n      });\n    }\n  };\n\n  _proto._normalizeField = function _normalizeField(parent, selection, record, data) {\n    !(typeof data === 'object' && data) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'writeField(): Expected data for field `%s` to be an object.', selection.name) : invariant(false) : void 0;\n    var responseKey = selection.alias || selection.name;\n    var storageKey = getStorageKey(selection, this._variables);\n    var fieldValue = data[responseKey];\n\n    if (fieldValue == null) {\n      if (fieldValue === undefined) {\n        // Fields may be missing in the response in two main cases:\n        // - Inside a client extension: the server will not generally return\n        //   values for these fields, but a local update may provide them.\n        // - Inside an abstract type refinement where the concrete type does\n        //   not conform to the interface/union.\n        // However an otherwise-required field may also be missing if the server\n        // is configured to skip fields with `null` values, in which case the\n        // client is assumed to be correctly configured with\n        // treatMissingFieldsAsNull=true.\n        var isOptionalField = this._isClientExtension || this._isUnmatchedAbstractType;\n\n        if (isOptionalField) {\n          // Field not expected to exist regardless of whether the server is pruning null\n          // fields or not.\n          return;\n        } else if (!this._treatMissingFieldsAsNull) {\n          // Not optional and the server is not pruning null fields: field is expected\n          // to be present\n          if (process.env.NODE_ENV !== \"production\") {\n            process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayResponseNormalizer: Payload did not contain a value ' + 'for field `%s: %s`. Check that you are parsing with the same ' + 'query that was used to fetch the payload.', responseKey, storageKey) : void 0;\n          }\n\n          return;\n        }\n      }\n\n      if (process.env.NODE_ENV !== \"production\") {\n        if (selection.kind === SCALAR_FIELD) {\n          this._validateConflictingFieldsWithIdenticalId(record, storageKey, fieldValue);\n        }\n      }\n\n      RelayModernRecord.setValue(record, storageKey, null);\n      return;\n    }\n\n    if (selection.kind === SCALAR_FIELD) {\n      if (process.env.NODE_ENV !== \"production\") {\n        this._validateConflictingFieldsWithIdenticalId(record, storageKey, fieldValue);\n      }\n\n      RelayModernRecord.setValue(record, storageKey, fieldValue);\n    } else if (selection.kind === LINKED_FIELD) {\n      this._path.push(responseKey);\n\n      if (selection.plural) {\n        this._normalizePluralLink(selection, record, storageKey, fieldValue);\n      } else {\n        this._normalizeLink(selection, record, storageKey, fieldValue);\n      }\n\n      this._path.pop();\n    } else {\n      selection;\n      !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer(): Unexpected ast kind `%s` during normalization.', selection.kind) : invariant(false) : void 0;\n    }\n  };\n\n  _proto._normalizeActorChange = function _normalizeActorChange(parent, selection, record, data) {\n    var _field$concreteType;\n\n    var field = selection.linkedField;\n    !(typeof data === 'object' && data) ? process.env.NODE_ENV !== \"production\" ? invariant(false, '_normalizeActorChange(): Expected data for field `%s` to be an object.', field.name) : invariant(false) : void 0;\n    var responseKey = field.alias || field.name;\n    var storageKey = getStorageKey(field, this._variables);\n    var fieldValue = data[responseKey];\n\n    if (fieldValue == null) {\n      if (fieldValue === undefined) {\n        var isOptionalField = this._isClientExtension || this._isUnmatchedAbstractType;\n\n        if (isOptionalField) {\n          return;\n        } else if (!this._treatMissingFieldsAsNull) {\n          if (process.env.NODE_ENV !== \"production\") {\n            process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayResponseNormalizer: Payload did not contain a value ' + 'for field `%s: %s`. Check that you are parsing with the same ' + 'query that was used to fetch the payload.', responseKey, storageKey) : void 0;\n          }\n\n          return;\n        }\n      }\n\n      RelayModernRecord.setValue(record, storageKey, null);\n      return;\n    }\n\n    var actorIdentifier = getActorIdentifierFromPayload(fieldValue);\n\n    if (actorIdentifier == null) {\n      if (process.env.NODE_ENV !== \"production\") {\n        process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayResponseNormalizer: Payload did not contain a value ' + 'for field `%s`. Check that you are parsing with the same ' + 'query that was used to fetch the payload. Payload is `%s`.', ACTOR_IDENTIFIER_FIELD_NAME, JSON.stringify(fieldValue, null, 2)) : void 0;\n      }\n\n      RelayModernRecord.setValue(record, storageKey, null);\n      return;\n    } // $FlowFixMe[incompatible-call]\n\n\n    var typeName = (_field$concreteType = field.concreteType) !== null && _field$concreteType !== void 0 ? _field$concreteType : this._getRecordType(fieldValue);\n    var nextID = this._getDataId( // $FlowFixMe[incompatible-call]\n    fieldValue, typeName) || RelayModernRecord.getLinkedRecordID(record, storageKey) || generateClientID(RelayModernRecord.getDataID(record), storageKey);\n    !(typeof nextID === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected id on field `%s` to be a string.', storageKey) : invariant(false) : void 0;\n    RelayModernRecord.setActorLinkedRecordID(record, storageKey, actorIdentifier, nextID);\n\n    this._followupPayloads.push({\n      kind: 'ActorPayload',\n      data: fieldValue,\n      dataID: nextID,\n      path: [].concat((0, _toConsumableArray2[\"default\"])(this._path), [responseKey]),\n      typeName: typeName,\n      variables: this._variables,\n      node: field,\n      actorIdentifier: actorIdentifier\n    });\n  };\n\n  _proto._normalizeFlightField = function _normalizeFlightField(parent, selection, record, data) {\n    var responseKey = selection.alias || selection.name;\n    var storageKey = getStorageKey(selection, this._variables);\n    var fieldValue = data[responseKey];\n\n    if (fieldValue == null) {\n      if (fieldValue === undefined) {\n        // Flight field may be missing in the response if:\n        // - It is inside an abstract type refinement where the concrete type does\n        //   not conform to the interface/union.\n        // However an otherwise-required field may also be missing if the server\n        // is configured to skip fields with `null` values, in which case the\n        // client is assumed to be correctly configured with\n        // treatMissingFieldsAsNull=true.\n        if (this._isUnmatchedAbstractType) {\n          // Field not expected to exist regardless of whether the server is pruning null\n          // fields or not.\n          return;\n        } else {\n          // Not optional and the server is not pruning null fields: field is expected\n          // to be present\n          !this._treatMissingFieldsAsNull ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Payload did not contain a value for ' + 'field `%s: %s`. Check that you are parsing with the same ' + 'query that was used to fetch the payload.', responseKey, storageKey) : invariant(false) : void 0;\n        }\n      }\n\n      RelayModernRecord.setValue(record, storageKey, null);\n      return;\n    }\n\n    var reactFlightPayload = refineToReactFlightPayloadData(fieldValue);\n    var reactFlightPayloadDeserializer = this._reactFlightPayloadDeserializer;\n    !(reactFlightPayload != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected React Flight payload data to be an ' + 'object with `status`, tree`, `queries` and `errors` properties, got ' + '`%s`.', fieldValue) : invariant(false) : void 0;\n    !(typeof reactFlightPayloadDeserializer === 'function') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected reactFlightPayloadDeserializer to ' + 'be a function, got `%s`.', reactFlightPayloadDeserializer) : invariant(false) : void 0;\n\n    if (reactFlightPayload.errors.length > 0) {\n      if (typeof this._reactFlightServerErrorHandler === 'function') {\n        this._reactFlightServerErrorHandler(reactFlightPayload.status, reactFlightPayload.errors);\n      } else {\n        process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayResponseNormalizer: Received server errors for field `%s`.\\n\\n' + '%s\\n%s', responseKey, reactFlightPayload.errors[0].message, reactFlightPayload.errors[0].stack) : void 0;\n      }\n    }\n\n    var reactFlightID = generateClientID(RelayModernRecord.getDataID(record), getStorageKey(selection, this._variables));\n\n    var reactFlightClientResponseRecord = this._recordSource.get(reactFlightID);\n\n    if (reactFlightClientResponseRecord == null) {\n      reactFlightClientResponseRecord = RelayModernRecord.create(reactFlightID, REACT_FLIGHT_TYPE_NAME);\n\n      this._recordSource.set(reactFlightID, reactFlightClientResponseRecord);\n    }\n\n    if (reactFlightPayload.tree == null) {\n      // This typically indicates that a fatal server error prevented rows from\n      // being written. When this occurs, we should not continue normalization of\n      // the Flight field because the row response is malformed.\n      //\n      // Receiving empty rows is OK because it can indicate the start of a stream.\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayResponseNormalizer: Expected `tree` not to be null. This ' + 'typically indicates that a fatal server error prevented any Server ' + 'Component rows from being written.') : void 0; // We create the flight record with a null value for the tree\n      // and empty reachable definitions\n\n      RelayModernRecord.setValue(reactFlightClientResponseRecord, REACT_FLIGHT_TREE_STORAGE_KEY, null);\n      RelayModernRecord.setValue(reactFlightClientResponseRecord, REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY, []);\n      RelayModernRecord.setLinkedRecordID(record, storageKey, reactFlightID);\n      return;\n    } // We store the deserialized reactFlightClientResponse in a separate\n    // record and link it to the parent record. This is so we can GC the Flight\n    // tree later even if the parent record is still reachable.\n\n\n    var reactFlightClientResponse = reactFlightPayloadDeserializer(reactFlightPayload.tree);\n    RelayModernRecord.setValue(reactFlightClientResponseRecord, REACT_FLIGHT_TREE_STORAGE_KEY, reactFlightClientResponse);\n    var reachableExecutableDefinitions = [];\n\n    var _iterator = (0, _createForOfIteratorHelper2[\"default\"])(reactFlightPayload.queries),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var query = _step.value;\n\n        if (query.response.data != null) {\n          this._followupPayloads.push({\n            kind: 'ModuleImportPayload',\n            args: null,\n            data: query.response.data,\n            dataID: ROOT_ID,\n            operationReference: query.module,\n            path: [],\n            typeName: ROOT_TYPE,\n            variables: query.variables,\n            actorIdentifier: this._actorIdentifier\n          });\n        }\n\n        reachableExecutableDefinitions.push({\n          module: query.module,\n          variables: query.variables\n        });\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    var _iterator2 = (0, _createForOfIteratorHelper2[\"default\"])(reactFlightPayload.fragments),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var fragment = _step2.value;\n\n        if (fragment.response.data != null) {\n          this._followupPayloads.push({\n            kind: 'ModuleImportPayload',\n            args: null,\n            data: fragment.response.data,\n            dataID: fragment.__id,\n            operationReference: fragment.module,\n            path: [],\n            typeName: fragment.__typename,\n            variables: fragment.variables,\n            actorIdentifier: this._actorIdentifier\n          });\n        }\n\n        reachableExecutableDefinitions.push({\n          module: fragment.module,\n          variables: fragment.variables\n        });\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    RelayModernRecord.setValue(reactFlightClientResponseRecord, REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY, reachableExecutableDefinitions);\n    RelayModernRecord.setLinkedRecordID(record, storageKey, reactFlightID);\n  };\n\n  _proto._normalizeLink = function _normalizeLink(field, record, storageKey, fieldValue) {\n    var _field$concreteType2;\n\n    !(typeof fieldValue === 'object' && fieldValue) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected data for field `%s` to be an object.', storageKey) : invariant(false) : void 0;\n    var nextID = this._getDataId( // $FlowFixMe[incompatible-variance]\n    fieldValue, // $FlowFixMe[incompatible-variance]\n    (_field$concreteType2 = field.concreteType) !== null && _field$concreteType2 !== void 0 ? _field$concreteType2 : this._getRecordType(fieldValue)) || // Reuse previously generated client IDs\n    RelayModernRecord.getLinkedRecordID(record, storageKey) || generateClientID(RelayModernRecord.getDataID(record), storageKey);\n    !(typeof nextID === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected id on field `%s` to be a string.', storageKey) : invariant(false) : void 0;\n\n    if (process.env.NODE_ENV !== \"production\") {\n      this._validateConflictingLinkedFieldsWithIdenticalId(record, RelayModernRecord.getLinkedRecordID(record, storageKey), nextID, storageKey);\n    }\n\n    RelayModernRecord.setLinkedRecordID(record, storageKey, nextID);\n\n    var nextRecord = this._recordSource.get(nextID);\n\n    if (!nextRecord) {\n      // $FlowFixMe[incompatible-variance]\n      var _typeName4 = field.concreteType || this._getRecordType(fieldValue);\n\n      nextRecord = RelayModernRecord.create(nextID, _typeName4);\n\n      this._recordSource.set(nextID, nextRecord);\n    } else if (process.env.NODE_ENV !== \"production\") {\n      this._validateRecordType(nextRecord, field, fieldValue);\n    } // $FlowFixMe[incompatible-variance]\n\n\n    this._traverseSelections(field, nextRecord, fieldValue);\n  };\n\n  _proto._normalizePluralLink = function _normalizePluralLink(field, record, storageKey, fieldValue) {\n    var _this = this;\n\n    !Array.isArray(fieldValue) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected data for field `%s` to be an array ' + 'of objects.', storageKey) : invariant(false) : void 0;\n    var prevIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);\n    var nextIDs = [];\n    fieldValue.forEach(function (item, nextIndex) {\n      var _field$concreteType3;\n\n      // validate response data\n      if (item == null) {\n        nextIDs.push(item);\n        return;\n      }\n\n      _this._path.push(String(nextIndex));\n\n      !(typeof item === 'object') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected elements for field `%s` to be ' + 'objects.', storageKey) : invariant(false) : void 0;\n      var nextID = _this._getDataId( // $FlowFixMe[incompatible-variance]\n      item, // $FlowFixMe[incompatible-variance]\n      (_field$concreteType3 = field.concreteType) !== null && _field$concreteType3 !== void 0 ? _field$concreteType3 : _this._getRecordType(item)) || prevIDs && prevIDs[nextIndex] || // Reuse previously generated client IDs:\n      generateClientID(RelayModernRecord.getDataID(record), storageKey, nextIndex);\n      !(typeof nextID === 'string') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayResponseNormalizer: Expected id of elements of field `%s` to ' + 'be strings.', storageKey) : invariant(false) : void 0;\n      nextIDs.push(nextID);\n\n      var nextRecord = _this._recordSource.get(nextID);\n\n      if (!nextRecord) {\n        // $FlowFixMe[incompatible-variance]\n        var _typeName5 = field.concreteType || _this._getRecordType(item);\n\n        nextRecord = RelayModernRecord.create(nextID, _typeName5);\n\n        _this._recordSource.set(nextID, nextRecord);\n      } else if (process.env.NODE_ENV !== \"production\") {\n        _this._validateRecordType(nextRecord, field, item);\n      } // NOTE: the check to strip __DEV__ code only works for simple\n      // `if (__DEV__)`\n\n\n      if (process.env.NODE_ENV !== \"production\") {\n        if (prevIDs) {\n          _this._validateConflictingLinkedFieldsWithIdenticalId(record, prevIDs[nextIndex], nextID, storageKey);\n        }\n      } // $FlowFixMe[incompatible-variance]\n\n\n      _this._traverseSelections(field, nextRecord, item);\n\n      _this._path.pop();\n    });\n    RelayModernRecord.setLinkedRecordIDs(record, storageKey, nextIDs);\n  }\n  /**\n   * Warns if the type of the record does not match the type of the field/payload.\n   */\n  ;\n\n  _proto._validateRecordType = function _validateRecordType(record, field, payload) {\n    var _field$concreteType4;\n\n    var typeName = (_field$concreteType4 = field.concreteType) !== null && _field$concreteType4 !== void 0 ? _field$concreteType4 : this._getRecordType(payload);\n    var dataID = RelayModernRecord.getDataID(record);\n    process.env.NODE_ENV !== \"production\" ? warning(isClientID(dataID) && dataID !== ROOT_ID || RelayModernRecord.getType(record) === typeName, 'RelayResponseNormalizer: Invalid record `%s`. Expected %s to be ' + 'consistent, but the record was assigned conflicting types `%s` ' + 'and `%s`. The GraphQL server likely violated the globally unique ' + 'id requirement by returning the same id for different objects.', dataID, TYPENAME_KEY, RelayModernRecord.getType(record), typeName) : void 0;\n  }\n  /**\n   * Warns if a single response contains conflicting fields with the same id\n   */\n  ;\n\n  _proto._validateConflictingFieldsWithIdenticalId = function _validateConflictingFieldsWithIdenticalId(record, storageKey, fieldValue) {\n    // NOTE: Only call this function in DEV\n    if (process.env.NODE_ENV !== \"production\") {\n      var dataID = RelayModernRecord.getDataID(record);\n      var previousValue = RelayModernRecord.getValue(record, storageKey);\n      process.env.NODE_ENV !== \"production\" ? warning(storageKey === TYPENAME_KEY || previousValue === undefined || areEqual(previousValue, fieldValue), 'RelayResponseNormalizer: Invalid record. The record contains two ' + 'instances of the same id: `%s` with conflicting field, %s and its values: %s and %s. ' + 'If two fields are different but share ' + 'the same id, one field will overwrite the other.', dataID, storageKey, previousValue, fieldValue) : void 0;\n    }\n  }\n  /**\n   * Warns if a single response contains conflicting fields with the same id\n   */\n  ;\n\n  _proto._validateConflictingLinkedFieldsWithIdenticalId = function _validateConflictingLinkedFieldsWithIdenticalId(record, prevID, nextID, storageKey) {\n    // NOTE: Only call this function in DEV\n    if (process.env.NODE_ENV !== \"production\") {\n      process.env.NODE_ENV !== \"production\" ? warning(prevID === undefined || prevID === nextID, 'RelayResponseNormalizer: Invalid record. The record contains ' + 'references to the conflicting field, %s and its id values: %s and %s. ' + 'We need to make sure that the record the field points ' + 'to remains consistent or one field will overwrite the other.', storageKey, prevID, nextID) : void 0;\n    }\n  };\n\n  return RelayResponseNormalizer;\n}();\n\nmodule.exports = {\n  normalize: normalize\n};"]},"metadata":{},"sourceType":"script"}