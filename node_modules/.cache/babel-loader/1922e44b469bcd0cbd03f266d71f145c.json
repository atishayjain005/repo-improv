{"ast":null,"code":"var _jsxFileName = \"/home/akshay/Atishay/appointy-screening/src/route/Profile.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport GitDataRoot from './GitData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nasync function fetchGraphQL(text, variables) {\n  const REACT_APP_GITHUB_AUTH_TOKEN = localStorage.getItem(\"token\"); // Fetch data from GitHub's GraphQL API:\n\n  const response = await fetch('https://api.github.com/graphql', {\n    method: 'POST',\n    headers: {\n      Authorization: `bearer ${REACT_APP_GITHUB_AUTH_TOKEN}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: text,\n      variables\n    })\n  }); // Get the response as JSON\n\n  return await response.json();\n}\n\nexport default function Profile() {\n  _s();\n\n  const [name, setName] = useState(null); // When the component mounts we'll fetch a repository name\n\n  useEffect(() => {\n    let isMounted = true;\n    fetchGraphQL(`\n    mutation GitDataMutation($nameChange: String!) {\n        updateRepository(\n          input: { repositoryId: \"R_kgDOGTgzxA\", name: $nameChange }\n        ) {\n          repository {\n            createdAt\n            nameWithOwner\n            name\n            id\n          }\n        }\n      }\n        }\n      }\n    `).then(response => {\n      // Avoid updating state if the component unmounted before the fetch completes\n      if (!isMounted) {\n        return;\n      }\n\n      const data = response.data;\n      setName(data);\n      console.log(data.updateRepository, \"data\");\n    }).catch(error => {\n      console.error(error);\n    });\n    return () => {\n      isMounted = false;\n    };\n  }, [fetchGraphQL]); // Render \"Loading\" until the query completes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: name != null ? `updateRepository: ${name}` : \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Profile, \"ReMaBO0KTBagkgCY2lHMN4bzQTs=\");\n\n_c = Profile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"sources":["/home/akshay/Atishay/appointy-screening/src/route/Profile.jsx"],"names":["React","useState","useEffect","GitDataRoot","fetchGraphQL","text","variables","REACT_APP_GITHUB_AUTH_TOKEN","localStorage","getItem","response","fetch","method","headers","Authorization","body","JSON","stringify","query","json","Profile","name","setName","isMounted","then","data","console","log","updateRepository","catch","error"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC;AAEA,OAAOC,WAAP,MAAwB,WAAxB;;;AAEA,eAAeC,YAAf,CAA4BC,IAA5B,EAAkCC,SAAlC,EAA6C;AACzC,QAAMC,2BAA2B,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAApC,CADyC,CAGzC;;AACA,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAD,EAAmC;AAC7DC,IAAAA,MAAM,EAAE,MADqD;AAE7DC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAG,UAASP,2BAA4B,EAD9C;AAEP,sBAAgB;AAFT,KAFoD;AAM7DQ,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,MAAAA,KAAK,EAAEb,IADY;AAEnBC,MAAAA;AAFmB,KAAf;AANuD,GAAnC,CAA5B,CAJyC,CAgBzC;;AACA,SAAO,MAAMI,QAAQ,CAACS,IAAT,EAAb;AACD;;AAMH,eAAe,SAASC,OAAT,GAAmB;AAAA;;AAE/B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBrB,QAAQ,CAAC,IAAD,CAAhC,CAF+B,CAIhC;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIqB,SAAS,GAAG,IAAhB;AACAnB,IAAAA,YAAY,CAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAfgB,CAAZ,CAeGoB,IAfH,CAeQd,QAAQ,IAAI;AAClB;AACA,UAAI,CAACa,SAAL,EAAgB;AACd;AACD;;AACD,YAAME,IAAI,GAAGf,QAAQ,CAACe,IAAtB;AACAH,MAAAA,OAAO,CAACG,IAAD,CAAP;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,gBAAjB,EAAkC,MAAlC;AACD,KAvBD,EAuBGC,KAvBH,CAuBSC,KAAK,IAAI;AAChBJ,MAAAA,OAAO,CAACI,KAAR,CAAcA,KAAd;AACD,KAzBD;AA2BA,WAAO,MAAM;AACXP,MAAAA,SAAS,GAAG,KAAZ;AACD,KAFD;AAGD,GAhCQ,EAgCN,CAACnB,YAAD,CAhCM,CAAT,CALgC,CAuChC;;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA,6BACE;AAAA,kBACGiB,IAAI,IAAI,IAAR,GAAgB,qBAAoBA,IAAK,EAAzC,GAA6C;AADhD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GAnDuBD,O;;KAAAA,O","sourcesContent":["import React,{useState,useEffect} from 'react'\nimport graphql from \"babel-plugin-relay/macro\";\nimport GitDataRoot from './GitData';\n\nasync function fetchGraphQL(text, variables) {\n    const REACT_APP_GITHUB_AUTH_TOKEN = localStorage.getItem(\"token\");\n  \n    // Fetch data from GitHub's GraphQL API:\n    const response = await fetch('https://api.github.com/graphql', {\n      method: 'POST',\n      headers: {\n        Authorization: `bearer ${REACT_APP_GITHUB_AUTH_TOKEN}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        query: text,\n        variables,\n      }),\n    });\n  \n    // Get the response as JSON\n    return await response.json();\n  }\n\n\n\n\n\nexport default function Profile() {\n\n   const [name, setName] = useState(null);\n\n  // When the component mounts we'll fetch a repository name\n  useEffect(() => {\n    let isMounted = true;\n    fetchGraphQL(`\n    mutation GitDataMutation($nameChange: String!) {\n        updateRepository(\n          input: { repositoryId: \"R_kgDOGTgzxA\", name: $nameChange }\n        ) {\n          repository {\n            createdAt\n            nameWithOwner\n            name\n            id\n          }\n        }\n      }\n        }\n      }\n    `).then(response => {\n      // Avoid updating state if the component unmounted before the fetch completes\n      if (!isMounted) {\n        return;\n      }\n      const data = response.data;\n      setName(data);\n      console.log(data.updateRepository,\"data\")\n    }).catch(error => {\n      console.error(error);\n    });\n\n    return () => {\n      isMounted = false;\n    };\n  }, [fetchGraphQL]);\n\n  // Render \"Loading\" until the query completes\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          {name != null ? `updateRepository: ${name}` : \"Loading\"}\n        </p>\n      </header>\n    </div>\n  );\n\n\n}\n"]},"metadata":{},"sourceType":"module"}