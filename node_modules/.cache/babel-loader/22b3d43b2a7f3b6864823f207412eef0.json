{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar invariant = require('invariant');\n\nvar _require = require('../query/GraphQLTag'),\n    getFragment = _require.getFragment;\n\nvar _require2 = require('./RelayModernSelector'),\n    getSelector = _require2.getSelector;\n\nvar contextStack = [];\n\nfunction withResolverContext(context, cb) {\n  contextStack.push(context);\n\n  try {\n    return cb();\n  } finally {\n    contextStack.pop();\n  }\n} // NOTE: these declarations are copied from 'useFragment'; it would be good\n// to figure out how to share the same type signature between the two functions.\n// The declarations ensure that the type of the returned data is:\n//   - non-nullable if the provided ref type is non-nullable\n//   - nullable if the provided ref type is nullable\n//   - array of non-nullable if the privoided ref type is an array of\n//     non-nullable refs\n//   - array of nullable if the privoided ref type is an array of nullable refs\n\n\nfunction readFragment(fragmentInput, fragmentRef) {\n  if (!contextStack.length) {\n    throw new Error('readFragment should be called only from within a Relay Resolver function.');\n  }\n\n  var context = contextStack[contextStack.length - 1];\n  var fragmentNode = getFragment(fragmentInput);\n  var fragmentSelector = getSelector(fragmentNode, fragmentRef);\n  !(fragmentSelector != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Expected a selector for the fragment of the resolver \".concat(fragmentNode.name, \", but got null.\")) : invariant(false) : void 0;\n  !(fragmentSelector.kind === 'SingularReaderSelector') ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Expected a singular reader selector for the fragment of the resolver \".concat(fragmentNode.name, \", but it was plural.\")) : invariant(false) : void 0;\n  return context.getDataForResolverFragment(fragmentSelector, fragmentRef);\n}\n\nmodule.exports = {\n  readFragment: readFragment,\n  withResolverContext: withResolverContext\n};","map":{"version":3,"sources":["/home/akshay/Atishay/appointy-screening/node_modules/relay-runtime/lib/store/ResolverFragments.js"],"names":["invariant","require","_require","getFragment","_require2","getSelector","contextStack","withResolverContext","context","cb","push","pop","readFragment","fragmentInput","fragmentRef","length","Error","fragmentNode","fragmentSelector","process","env","NODE_ENV","concat","name","kind","getDataForResolverFragment","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AAEA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,qBAAD,CAAtB;AAAA,IACIE,WAAW,GAAGD,QAAQ,CAACC,WAD3B;;AAGA,IAAIC,SAAS,GAAGH,OAAO,CAAC,uBAAD,CAAvB;AAAA,IACII,WAAW,GAAGD,SAAS,CAACC,WAD5B;;AAGA,IAAIC,YAAY,GAAG,EAAnB;;AAEA,SAASC,mBAAT,CAA6BC,OAA7B,EAAsCC,EAAtC,EAA0C;AACxCH,EAAAA,YAAY,CAACI,IAAb,CAAkBF,OAAlB;;AAEA,MAAI;AACF,WAAOC,EAAE,EAAT;AACD,GAFD,SAEU;AACRH,IAAAA,YAAY,CAACK,GAAb;AACD;AACF,C,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASC,YAAT,CAAsBC,aAAtB,EAAqCC,WAArC,EAAkD;AAChD,MAAI,CAACR,YAAY,CAACS,MAAlB,EAA0B;AACxB,UAAM,IAAIC,KAAJ,CAAU,2EAAV,CAAN;AACD;;AAED,MAAIR,OAAO,GAAGF,YAAY,CAACA,YAAY,CAACS,MAAb,GAAsB,CAAvB,CAA1B;AACA,MAAIE,YAAY,GAAGd,WAAW,CAACU,aAAD,CAA9B;AACA,MAAIK,gBAAgB,GAAGb,WAAW,CAACY,YAAD,EAAeH,WAAf,CAAlC;AACA,IAAEI,gBAAgB,IAAI,IAAtB,IAA8BC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCrB,SAAS,CAAC,KAAD,EAAQ,wDAAwDsB,MAAxD,CAA+DL,YAAY,CAACM,IAA5E,EAAkF,iBAAlF,CAAR,CAAjD,GAAiKvB,SAAS,CAAC,KAAD,CAAxM,GAAkN,KAAK,CAAvN;AACA,IAAEkB,gBAAgB,CAACM,IAAjB,KAA0B,wBAA5B,IAAwDL,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCrB,SAAS,CAAC,KAAD,EAAQ,wEAAwEsB,MAAxE,CAA+EL,YAAY,CAACM,IAA5F,EAAkG,sBAAlG,CAAR,CAAjD,GAAsLvB,SAAS,CAAC,KAAD,CAAvP,GAAiQ,KAAK,CAAtQ;AACA,SAAOQ,OAAO,CAACiB,0BAAR,CAAmCP,gBAAnC,EAAqDJ,WAArD,CAAP;AACD;;AAEDY,MAAM,CAACC,OAAP,GAAiB;AACff,EAAAA,YAAY,EAAEA,YADC;AAEfL,EAAAA,mBAAmB,EAAEA;AAFN,CAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar invariant = require('invariant');\n\nvar _require = require('../query/GraphQLTag'),\n    getFragment = _require.getFragment;\n\nvar _require2 = require('./RelayModernSelector'),\n    getSelector = _require2.getSelector;\n\nvar contextStack = [];\n\nfunction withResolverContext(context, cb) {\n  contextStack.push(context);\n\n  try {\n    return cb();\n  } finally {\n    contextStack.pop();\n  }\n} // NOTE: these declarations are copied from 'useFragment'; it would be good\n// to figure out how to share the same type signature between the two functions.\n// The declarations ensure that the type of the returned data is:\n//   - non-nullable if the provided ref type is non-nullable\n//   - nullable if the provided ref type is nullable\n//   - array of non-nullable if the privoided ref type is an array of\n//     non-nullable refs\n//   - array of nullable if the privoided ref type is an array of nullable refs\n\n\nfunction readFragment(fragmentInput, fragmentRef) {\n  if (!contextStack.length) {\n    throw new Error('readFragment should be called only from within a Relay Resolver function.');\n  }\n\n  var context = contextStack[contextStack.length - 1];\n  var fragmentNode = getFragment(fragmentInput);\n  var fragmentSelector = getSelector(fragmentNode, fragmentRef);\n  !(fragmentSelector != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Expected a selector for the fragment of the resolver \".concat(fragmentNode.name, \", but got null.\")) : invariant(false) : void 0;\n  !(fragmentSelector.kind === 'SingularReaderSelector') ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Expected a singular reader selector for the fragment of the resolver \".concat(fragmentNode.name, \", but it was plural.\")) : invariant(false) : void 0;\n  return context.getDataForResolverFragment(fragmentSelector, fragmentRef);\n}\n\nmodule.exports = {\n  readFragment: readFragment,\n  withResolverContext: withResolverContext\n};"]},"metadata":{},"sourceType":"script"}