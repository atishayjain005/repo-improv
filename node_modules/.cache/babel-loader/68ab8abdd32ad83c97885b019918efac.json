{"ast":null,"code":"import _regeneratorRuntime from\"/home/akshay/Atishay/appointy-screening/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/akshay/Atishay/appointy-screening/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";function FetchGraphQL(_x,_x2){return _FetchGraphQL.apply(this,arguments);}function _FetchGraphQL(){_FetchGraphQL=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(text,variables){var TOKEN,response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:TOKEN=localStorage.getItem(\"token\");console.log(TOKEN);// Fetch data from GitHub's GraphQL API:\n_context.next=4;return fetch(\"https://api.github.com/graphql\",{method:\"POST\",headers:{Authorization:\"bearer  \".concat(TOKEN),\"Content-Type\":\"application/json\"},body:JSON.stringify({query:text,variables:variables})});case 4:response=_context.sent;return _context.abrupt(\"return\",response.json());case 6:case\"end\":return _context.stop();}}},_callee);}));return _FetchGraphQL.apply(this,arguments);}export default FetchGraphQL;","map":{"version":3,"sources":["/home/akshay/Atishay/appointy-screening/src/FetchGraphQL.jsx"],"names":["FetchGraphQL","text","variables","TOKEN","localStorage","getItem","console","log","fetch","method","headers","Authorization","body","JSON","stringify","query","response","json"],"mappings":"yPAAeA,CAAAA,Y,oJAAf,iBAA4BC,IAA5B,CAAkCC,SAAlC,qIACQC,KADR,CACgBC,YAAY,CAACC,OAAb,CAAqB,OAArB,CADhB,CAEEC,OAAO,CAACC,GAAR,CAAYJ,KAAZ,EACA;AAHF,sBAIyBK,CAAAA,KAAK,CAAC,gCAAD,CAAmC,CAC7DC,MAAM,CAAE,MADqD,CAE7DC,OAAO,CAAE,CACPC,aAAa,mBAAaR,KAAb,CADN,CAEP,eAAgB,kBAFT,CAFoD,CAM7DS,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CACnBC,KAAK,CAAEd,IADY,CAEnBC,SAAS,CAATA,SAFmB,CAAf,CANuD,CAAnC,CAJ9B,QAIQc,QAJR,+CAiBSA,QAAQ,CAACC,IAAT,EAjBT,wD,+CAoBA,cAAejB,CAAAA,YAAf","sourcesContent":["async function FetchGraphQL(text, variables) {\n  const TOKEN = localStorage.getItem(\"token\");\n  console.log(TOKEN);\n  // Fetch data from GitHub's GraphQL API:\n  const response = await fetch(\"https://api.github.com/graphql\", {\n    method: \"POST\",\n    headers: {\n      Authorization: `bearer  ${TOKEN}`,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({\n      query: text,\n      variables,\n    }),\n  });\n\n  // Get the response as JSON\n  return response.json();\n}\n\nexport default FetchGraphQL;\n"]},"metadata":{},"sourceType":"module"}