{"ast":null,"code":"import _slicedToArray from\"/home/akshay/Atishay/appointy-screening/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from\"react\";import TokenContext from\"./TokenContext\";import{getAuth,signInWithPopup,GithubAuthProvider}from\"firebase/auth\";import{initializeApp}from\"firebase/app\";import{getAnalytics}from\"firebase/analytics\";import{useState}from\"react\";import FetchGraphQL from\"../../FetchGraphQL\";import{Navigate}from\"react-router\";import{jsx as _jsx}from\"react/jsx-runtime\";var TokenState=function TokenState(props){var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),tokenValue=_useState2[0],setTokenValue=_useState2[1];var firebaseConfig={apiKey:\"AIzaSyC1Ybbqn2ZgdXsJcnSDKWer0Zx3-Qv0ROM\",authDomain:\"repo-improv.firebaseapp.com\",projectId:\"repo-improv\",storageBucket:\"repo-improv.appspot.com\",messagingSenderId:\"326241984035\",appId:\"1:326241984035:web:ade250b2bc59dc8763db96\",measurementId:\"G-B09R5NFKVV\"};// Initialize Firebase\nvar app=initializeApp(firebaseConfig);var analytics=getAnalytics(app);var signInAuth=function signInAuth(provider){var auth=getAuth(app);signInWithPopup(auth,provider).then(function(result){// This gives you a GitHub Access Token. You can use it to access the GitHub API.\nvar credential=GithubAuthProvider.credentialFromResult(result);var token=credential.accessToken;console.log(token);setTokenValue(token);localStorage.setItem(\"token\",token);// The signed-in user info.\nvar user=result.user;console.log(user);localStorage.setItem(\"user\",user.displayName);if(user){setTimeout(function(){alert(\"succesfully logged in\");window.location='/gitdata';},0);}else{window.location=\"/\";}// ...\n}).catch(function(error){// Handle Errors here.\nvar errorCode=error.code;var errorMessage=error.message;// The email of the user's account used.\nvar email=error.email;// The AuthCredential type that was used.\nvar credential=GithubAuthProvider.credentialFromError(error);// ...\n});};return/*#__PURE__*/_jsx(TokenContext.Provider,{value:{tokenValue:tokenValue,signInAuth:signInAuth},children:props.children});};export default TokenState;","map":{"version":3,"sources":["/home/akshay/Atishay/appointy-screening/src/context/Token/TokenState.js"],"names":["React","TokenContext","getAuth","signInWithPopup","GithubAuthProvider","initializeApp","getAnalytics","useState","FetchGraphQL","Navigate","TokenState","props","tokenValue","setTokenValue","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","analytics","signInAuth","provider","auth","then","result","credential","credentialFromResult","token","accessToken","console","log","localStorage","setItem","user","displayName","setTimeout","alert","window","location","catch","error","errorCode","code","errorMessage","message","email","credentialFromError","children"],"mappings":"0HAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,YAAP,KAAyB,gBAAzB,CACA,OAASC,OAAT,CAAkBC,eAAlB,CAAmCC,kBAAnC,KAA6D,eAA7D,CACA,OAASC,aAAT,KAA8B,cAA9B,CACA,OAASC,YAAT,KAA6B,oBAA7B,CACA,OAASC,QAAT,KAAyB,OAAzB,CACA,MAAOC,CAAAA,YAAP,KAAyB,oBAAzB,CACA,OAASC,QAAT,KAAyB,cAAzB,C,2CAEA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,KAAD,CAAW,CAE1B,cAAoCJ,QAAQ,CAAC,EAAD,CAA5C,wCAAOK,UAAP,eAAmBC,aAAnB,eAEA,GAAMC,CAAAA,cAAc,CAAG,CACnBC,MAAM,CAAE,yCADW,CAEnBC,UAAU,CAAE,6BAFO,CAGnBC,SAAS,CAAE,aAHQ,CAInBC,aAAa,CAAE,yBAJI,CAKnBC,iBAAiB,CAAE,cALA,CAMnBC,KAAK,CAAE,2CANY,CAOnBC,aAAa,CAAE,cAPI,CAAvB,CAUA;AACA,GAAMC,CAAAA,GAAG,CAAGjB,aAAa,CAACS,cAAD,CAAzB,CACA,GAAMS,CAAAA,SAAS,CAAGjB,YAAY,CAACgB,GAAD,CAA9B,CAEA,GAAME,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,QAAD,CAAc,CAC7B,GAAMC,CAAAA,IAAI,CAAGxB,OAAO,CAACoB,GAAD,CAApB,CACAnB,eAAe,CAACuB,IAAD,CAAOD,QAAP,CAAf,CACKE,IADL,CACU,SAACC,MAAD,CAAY,CACd;AACA,GAAMC,CAAAA,UAAU,CAAGzB,kBAAkB,CAAC0B,oBAAnB,CAAwCF,MAAxC,CAAnB,CACA,GAAMG,CAAAA,KAAK,CAAGF,UAAU,CAACG,WAAzB,CACAC,OAAO,CAACC,GAAR,CAAYH,KAAZ,EACAlB,aAAa,CAACkB,KAAD,CAAb,CAEAI,YAAY,CAACC,OAAb,CAAqB,OAArB,CAA8BL,KAA9B,EAEA;AACA,GAAMM,CAAAA,IAAI,CAAGT,MAAM,CAACS,IAApB,CACAJ,OAAO,CAACC,GAAR,CAAYG,IAAZ,EAEAF,YAAY,CAACC,OAAb,CAAqB,MAArB,CAA6BC,IAAI,CAACC,WAAlC,EACA,GAAID,IAAJ,CAAS,CACLE,UAAU,CAAC,UAAI,CAAEC,KAAK,CAAC,uBAAD,CAAL,CACjBC,MAAM,CAACC,QAAP,CAAkB,UAAlB,CACH,CAFa,CAEX,CAFW,CAAV,CAIH,CALD,IAKK,CACDD,MAAM,CAACC,QAAP,CAAgB,GAAhB,CAEH,CACD;AACH,CAzBL,EAyBOC,KAzBP,CAyBa,SAACC,KAAD,CAAW,CAChB;AACA,GAAMC,CAAAA,SAAS,CAAGD,KAAK,CAACE,IAAxB,CACA,GAAMC,CAAAA,YAAY,CAAGH,KAAK,CAACI,OAA3B,CACA;AACA,GAAMC,CAAAA,KAAK,CAAGL,KAAK,CAACK,KAApB,CACA;AACA,GAAMpB,CAAAA,UAAU,CAAGzB,kBAAkB,CAAC8C,mBAAnB,CAAuCN,KAAvC,CAAnB,CACA;AACH,CAlCL,EAmCH,CArCD,CAwCA,mBACI,KAAC,YAAD,CAAc,QAAd,EAAuB,KAAK,CAAE,CAAEhC,UAAU,CAAVA,UAAF,CAAcY,UAAU,CAAVA,UAAd,CAA9B,UACKb,KAAK,CAACwC,QADX,EADJ,CAKH,CA/DD,CAiEA,cAAezC,CAAAA,UAAf","sourcesContent":["import React from \"react\";\nimport TokenContext from \"./TokenContext\";\nimport { getAuth, signInWithPopup, GithubAuthProvider } from \"firebase/auth\";\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport { useState } from \"react\";\nimport FetchGraphQL from \"../../FetchGraphQL\";\nimport { Navigate } from \"react-router\";\n\nconst TokenState = (props) => {\n\n    const [tokenValue, setTokenValue] = useState(\"\")\n\n    const firebaseConfig = {\n        apiKey: \"AIzaSyC1Ybbqn2ZgdXsJcnSDKWer0Zx3-Qv0ROM\",\n        authDomain: \"repo-improv.firebaseapp.com\",\n        projectId: \"repo-improv\",\n        storageBucket: \"repo-improv.appspot.com\",\n        messagingSenderId: \"326241984035\",\n        appId: \"1:326241984035:web:ade250b2bc59dc8763db96\",\n        measurementId: \"G-B09R5NFKVV\"\n    };\n\n    // Initialize Firebase\n    const app = initializeApp(firebaseConfig);\n    const analytics = getAnalytics(app);\n\n    const signInAuth = (provider) => {\n        const auth = getAuth(app);\n        signInWithPopup(auth, provider)\n            .then((result) => {\n                // This gives you a GitHub Access Token. You can use it to access the GitHub API.\n                const credential = GithubAuthProvider.credentialFromResult(result);\n                const token = credential.accessToken;\n                console.log(token)\n                setTokenValue(token);\n \n                localStorage.setItem(\"token\", token);\n\n                // The signed-in user info.\n                const user = result.user;\n                console.log(user)\n\n                localStorage.setItem(\"user\", user.displayName);\n                if (user){\n                    setTimeout(()=>{ alert(\"succesfully logged in\");\n                    window.location = '/gitdata'\n                }, 0);\n                    \n                }else{\n                    window.location=\"/\"\n                    \n                }\n                // ...\n            }).catch((error) => {\n                // Handle Errors here.\n                const errorCode = error.code;\n                const errorMessage = error.message;\n                // The email of the user's account used.\n                const email = error.email;\n                // The AuthCredential type that was used.\n                const credential = GithubAuthProvider.credentialFromError(error);\n                // ...\n            });\n    }\n\n\n    return (\n        <TokenContext.Provider value={{ tokenValue, signInAuth }}>\n            {props.children}\n        </TokenContext.Provider>\n    )\n}\n\nexport default TokenState"]},"metadata":{},"sourceType":"module"}