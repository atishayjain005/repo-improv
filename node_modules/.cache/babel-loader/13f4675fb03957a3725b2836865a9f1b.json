{"ast":null,"code":"/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar ConnectionHandler = require('./handlers/connection/ConnectionHandler');\n\nvar ConnectionInterface = require('./handlers/connection/ConnectionInterface');\n\nvar GraphQLTag = require('./query/GraphQLTag');\n\nvar MutationHandlers = require('./handlers/connection/MutationHandlers');\n\nvar PreloadableQueryRegistry = require('./query/PreloadableQueryRegistry');\n\nvar RelayConcreteNode = require('./util/RelayConcreteNode');\n\nvar RelayConcreteVariables = require('./store/RelayConcreteVariables');\n\nvar RelayDeclarativeMutationConfig = require('./mutations/RelayDeclarativeMutationConfig');\n\nvar RelayDefaultHandleKey = require('./util/RelayDefaultHandleKey');\n\nvar RelayDefaultHandlerProvider = require('./handlers/RelayDefaultHandlerProvider');\n\nvar RelayError = require('./util/RelayError');\n\nvar RelayFeatureFlags = require('./util/RelayFeatureFlags');\n\nvar RelayModernEnvironment = require('./store/RelayModernEnvironment');\n\nvar RelayModernOperationDescriptor = require('./store/RelayModernOperationDescriptor');\n\nvar RelayModernRecord = require('./store/RelayModernRecord');\n\nvar RelayModernSelector = require('./store/RelayModernSelector');\n\nvar RelayModernStore = require('./store/RelayModernStore');\n\nvar RelayNetwork = require('./network/RelayNetwork');\n\nvar RelayObservable = require('./network/RelayObservable');\n\nvar RelayOperationTracker = require('./store/RelayOperationTracker');\n\nvar RelayProfiler = require('./util/RelayProfiler');\n\nvar RelayQueryResponseCache = require('./network/RelayQueryResponseCache');\n\nvar RelayRecordSource = require('./store/RelayRecordSource');\n\nvar RelayReplaySubject = require('./util/RelayReplaySubject');\n\nvar RelayStoreUtils = require('./store/RelayStoreUtils');\n\nvar ViewerPattern = require('./store/ViewerPattern');\n\nvar applyOptimisticMutation = require('./mutations/applyOptimisticMutation');\n\nvar commitLocalUpdate = require('./mutations/commitLocalUpdate');\n\nvar commitMutation = require('./mutations/commitMutation');\n\nvar createFragmentSpecResolver = require('./store/createFragmentSpecResolver');\n\nvar createPayloadFor3DField = require('./util/createPayloadFor3DField');\n\nvar createRelayContext = require('./store/createRelayContext');\n\nvar deepFreeze = require('./util/deepFreeze');\n\nvar fetchQuery = require('./query/fetchQuery');\n\nvar fetchQueryInternal = require('./query/fetchQueryInternal');\n\nvar fetchQuery_DEPRECATED = require('./query/fetchQuery_DEPRECATED');\n\nvar getFragmentIdentifier = require('./util/getFragmentIdentifier');\n\nvar getPaginationMetadata = require('./util/getPaginationMetadata');\n\nvar getPaginationVariables = require('./util/getPaginationVariables');\n\nvar getPendingOperationsForFragment = require('./util/getPendingOperationsForFragment');\n\nvar getRefetchMetadata = require('./util/getRefetchMetadata');\n\nvar getRelayHandleKey = require('./util/getRelayHandleKey');\n\nvar getRequestIdentifier = require('./util/getRequestIdentifier');\n\nvar getValueAtPath = require('./util/getValueAtPath');\n\nvar isPromise = require('./util/isPromise');\n\nvar isRelayModernEnvironment = require('./store/isRelayModernEnvironment');\n\nvar isScalarAndEqual = require('./util/isScalarAndEqual');\n\nvar readInlineData = require('./store/readInlineData');\n\nvar recycleNodesInto = require('./util/recycleNodesInto');\n\nvar reportMissingRequiredFields = require('./util/reportMissingRequiredFields');\n\nvar requestSubscription = require('./subscription/requestSubscription');\n\nvar stableCopy = require('./util/stableCopy');\n\nvar _require = require('./store/ClientID'),\n    generateClientID = _require.generateClientID,\n    generateUniqueClientID = _require.generateUniqueClientID,\n    isClientID = _require.isClientID; // As early as possible, check for the existence of the JavaScript globals which\n// Relay Runtime relies upon, and produce a clear message if they do not exist.\n\n\nif (process.env.NODE_ENV !== \"production\") {\n  var mapStr = typeof Map !== 'function' ? 'Map' : null;\n  var setStr = typeof Set !== 'function' ? 'Set' : null;\n  var promiseStr = typeof Promise !== 'function' ? 'Promise' : null;\n  var objStr = typeof Object.assign !== 'function' ? 'Object.assign' : null;\n\n  if (mapStr || setStr || promiseStr || objStr) {\n    throw new Error(\"relay-runtime requires \".concat([mapStr, setStr, promiseStr, objStr].filter(Boolean).join(', and '), \" to exist. \") + 'Use a polyfill to provide these for older browsers.');\n  }\n}\n/**\n * The public interface to Relay Runtime.\n */\n\n\nmodule.exports = {\n  // Core API\n  Environment: RelayModernEnvironment,\n  Network: RelayNetwork,\n  Observable: RelayObservable,\n  QueryResponseCache: RelayQueryResponseCache,\n  RecordSource: RelayRecordSource,\n  Record: RelayModernRecord,\n  ReplaySubject: RelayReplaySubject,\n  Store: RelayModernStore,\n  areEqualSelectors: RelayModernSelector.areEqualSelectors,\n  createFragmentSpecResolver: createFragmentSpecResolver,\n  createNormalizationSelector: RelayModernSelector.createNormalizationSelector,\n  createOperationDescriptor: RelayModernOperationDescriptor.createOperationDescriptor,\n  createReaderSelector: RelayModernSelector.createReaderSelector,\n  createRequestDescriptor: RelayModernOperationDescriptor.createRequestDescriptor,\n  getDataIDsFromFragment: RelayModernSelector.getDataIDsFromFragment,\n  getDataIDsFromObject: RelayModernSelector.getDataIDsFromObject,\n  getNode: GraphQLTag.getNode,\n  getFragment: GraphQLTag.getFragment,\n  getInlineDataFragment: GraphQLTag.getInlineDataFragment,\n  getModuleComponentKey: RelayStoreUtils.getModuleComponentKey,\n  getModuleOperationKey: RelayStoreUtils.getModuleOperationKey,\n  getPaginationFragment: GraphQLTag.getPaginationFragment,\n  getPluralSelector: RelayModernSelector.getPluralSelector,\n  getRefetchableFragment: GraphQLTag.getRefetchableFragment,\n  getRequest: GraphQLTag.getRequest,\n  getRequestIdentifier: getRequestIdentifier,\n  getSelector: RelayModernSelector.getSelector,\n  getSelectorsFromObject: RelayModernSelector.getSelectorsFromObject,\n  getSingularSelector: RelayModernSelector.getSingularSelector,\n  getStorageKey: RelayStoreUtils.getStorageKey,\n  getVariablesFromFragment: RelayModernSelector.getVariablesFromFragment,\n  getVariablesFromObject: RelayModernSelector.getVariablesFromObject,\n  getVariablesFromPluralFragment: RelayModernSelector.getVariablesFromPluralFragment,\n  getVariablesFromSingularFragment: RelayModernSelector.getVariablesFromSingularFragment,\n  reportMissingRequiredFields: reportMissingRequiredFields,\n  graphql: GraphQLTag.graphql,\n  isFragment: GraphQLTag.isFragment,\n  isInlineDataFragment: GraphQLTag.isInlineDataFragment,\n  isRequest: GraphQLTag.isRequest,\n  readInlineData: readInlineData,\n  // Declarative mutation API\n  MutationTypes: RelayDeclarativeMutationConfig.MutationTypes,\n  RangeOperations: RelayDeclarativeMutationConfig.RangeOperations,\n  // Extensions\n  DefaultHandlerProvider: RelayDefaultHandlerProvider,\n  ConnectionHandler: ConnectionHandler,\n  MutationHandlers: MutationHandlers,\n  VIEWER_ID: ViewerPattern.VIEWER_ID,\n  VIEWER_TYPE: ViewerPattern.VIEWER_TYPE,\n  // Helpers (can be implemented via the above API)\n  applyOptimisticMutation: applyOptimisticMutation,\n  commitLocalUpdate: commitLocalUpdate,\n  commitMutation: commitMutation,\n  fetchQuery: fetchQuery,\n  fetchQuery_DEPRECATED: fetchQuery_DEPRECATED,\n  isRelayModernEnvironment: isRelayModernEnvironment,\n  requestSubscription: requestSubscription,\n  // Configuration interface for legacy or special uses\n  ConnectionInterface: ConnectionInterface,\n  // Utilities\n  PreloadableQueryRegistry: PreloadableQueryRegistry,\n  RelayProfiler: RelayProfiler,\n  createPayloadFor3DField: createPayloadFor3DField,\n  // INTERNAL-ONLY: These exports might be removed at any point.\n  RelayConcreteNode: RelayConcreteNode,\n  RelayError: RelayError,\n  RelayFeatureFlags: RelayFeatureFlags,\n  DEFAULT_HANDLE_KEY: RelayDefaultHandleKey.DEFAULT_HANDLE_KEY,\n  FRAGMENTS_KEY: RelayStoreUtils.FRAGMENTS_KEY,\n  FRAGMENT_OWNER_KEY: RelayStoreUtils.FRAGMENT_OWNER_KEY,\n  ID_KEY: RelayStoreUtils.ID_KEY,\n  REF_KEY: RelayStoreUtils.REF_KEY,\n  REFS_KEY: RelayStoreUtils.REFS_KEY,\n  ROOT_ID: RelayStoreUtils.ROOT_ID,\n  ROOT_TYPE: RelayStoreUtils.ROOT_TYPE,\n  TYPENAME_KEY: RelayStoreUtils.TYPENAME_KEY,\n  deepFreeze: deepFreeze,\n  generateClientID: generateClientID,\n  generateUniqueClientID: generateUniqueClientID,\n  getRelayHandleKey: getRelayHandleKey,\n  isClientID: isClientID,\n  isPromise: isPromise,\n  isScalarAndEqual: isScalarAndEqual,\n  recycleNodesInto: recycleNodesInto,\n  stableCopy: stableCopy,\n  getFragmentIdentifier: getFragmentIdentifier,\n  getRefetchMetadata: getRefetchMetadata,\n  getPaginationMetadata: getPaginationMetadata,\n  getPaginationVariables: getPaginationVariables,\n  getPendingOperationsForFragment: getPendingOperationsForFragment,\n  getValueAtPath: getValueAtPath,\n  __internal: {\n    OperationTracker: RelayOperationTracker,\n    createRelayContext: createRelayContext,\n    getOperationVariables: RelayConcreteVariables.getOperationVariables,\n    fetchQuery: fetchQueryInternal.fetchQuery,\n    fetchQueryDeduped: fetchQueryInternal.fetchQueryDeduped,\n    getPromiseForActiveRequest: fetchQueryInternal.getPromiseForActiveRequest,\n    getObservableForActiveRequest: fetchQueryInternal.getObservableForActiveRequest\n  }\n};","map":{"version":3,"sources":["/home/akshay/Atishay/appointy-screening/node_modules/relay-runtime/lib/index.js"],"names":["ConnectionHandler","require","ConnectionInterface","GraphQLTag","MutationHandlers","PreloadableQueryRegistry","RelayConcreteNode","RelayConcreteVariables","RelayDeclarativeMutationConfig","RelayDefaultHandleKey","RelayDefaultHandlerProvider","RelayError","RelayFeatureFlags","RelayModernEnvironment","RelayModernOperationDescriptor","RelayModernRecord","RelayModernSelector","RelayModernStore","RelayNetwork","RelayObservable","RelayOperationTracker","RelayProfiler","RelayQueryResponseCache","RelayRecordSource","RelayReplaySubject","RelayStoreUtils","ViewerPattern","applyOptimisticMutation","commitLocalUpdate","commitMutation","createFragmentSpecResolver","createPayloadFor3DField","createRelayContext","deepFreeze","fetchQuery","fetchQueryInternal","fetchQuery_DEPRECATED","getFragmentIdentifier","getPaginationMetadata","getPaginationVariables","getPendingOperationsForFragment","getRefetchMetadata","getRelayHandleKey","getRequestIdentifier","getValueAtPath","isPromise","isRelayModernEnvironment","isScalarAndEqual","readInlineData","recycleNodesInto","reportMissingRequiredFields","requestSubscription","stableCopy","_require","generateClientID","generateUniqueClientID","isClientID","process","env","NODE_ENV","mapStr","Map","setStr","Set","promiseStr","Promise","objStr","Object","assign","Error","concat","filter","Boolean","join","module","exports","Environment","Network","Observable","QueryResponseCache","RecordSource","Record","ReplaySubject","Store","areEqualSelectors","createNormalizationSelector","createOperationDescriptor","createReaderSelector","createRequestDescriptor","getDataIDsFromFragment","getDataIDsFromObject","getNode","getFragment","getInlineDataFragment","getModuleComponentKey","getModuleOperationKey","getPaginationFragment","getPluralSelector","getRefetchableFragment","getRequest","getSelector","getSelectorsFromObject","getSingularSelector","getStorageKey","getVariablesFromFragment","getVariablesFromObject","getVariablesFromPluralFragment","getVariablesFromSingularFragment","graphql","isFragment","isInlineDataFragment","isRequest","MutationTypes","RangeOperations","DefaultHandlerProvider","VIEWER_ID","VIEWER_TYPE","DEFAULT_HANDLE_KEY","FRAGMENTS_KEY","FRAGMENT_OWNER_KEY","ID_KEY","REF_KEY","REFS_KEY","ROOT_ID","ROOT_TYPE","TYPENAME_KEY","__internal","OperationTracker","getOperationVariables","fetchQueryDeduped","getPromiseForActiveRequest","getObservableForActiveRequest"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,iBAAiB,GAAGC,OAAO,CAAC,yCAAD,CAA/B;;AAEA,IAAIC,mBAAmB,GAAGD,OAAO,CAAC,2CAAD,CAAjC;;AAEA,IAAIE,UAAU,GAAGF,OAAO,CAAC,oBAAD,CAAxB;;AAEA,IAAIG,gBAAgB,GAAGH,OAAO,CAAC,wCAAD,CAA9B;;AAEA,IAAII,wBAAwB,GAAGJ,OAAO,CAAC,kCAAD,CAAtC;;AAEA,IAAIK,iBAAiB,GAAGL,OAAO,CAAC,0BAAD,CAA/B;;AAEA,IAAIM,sBAAsB,GAAGN,OAAO,CAAC,gCAAD,CAApC;;AAEA,IAAIO,8BAA8B,GAAGP,OAAO,CAAC,4CAAD,CAA5C;;AAEA,IAAIQ,qBAAqB,GAAGR,OAAO,CAAC,8BAAD,CAAnC;;AAEA,IAAIS,2BAA2B,GAAGT,OAAO,CAAC,wCAAD,CAAzC;;AAEA,IAAIU,UAAU,GAAGV,OAAO,CAAC,mBAAD,CAAxB;;AAEA,IAAIW,iBAAiB,GAAGX,OAAO,CAAC,0BAAD,CAA/B;;AAEA,IAAIY,sBAAsB,GAAGZ,OAAO,CAAC,gCAAD,CAApC;;AAEA,IAAIa,8BAA8B,GAAGb,OAAO,CAAC,wCAAD,CAA5C;;AAEA,IAAIc,iBAAiB,GAAGd,OAAO,CAAC,2BAAD,CAA/B;;AAEA,IAAIe,mBAAmB,GAAGf,OAAO,CAAC,6BAAD,CAAjC;;AAEA,IAAIgB,gBAAgB,GAAGhB,OAAO,CAAC,0BAAD,CAA9B;;AAEA,IAAIiB,YAAY,GAAGjB,OAAO,CAAC,wBAAD,CAA1B;;AAEA,IAAIkB,eAAe,GAAGlB,OAAO,CAAC,2BAAD,CAA7B;;AAEA,IAAImB,qBAAqB,GAAGnB,OAAO,CAAC,+BAAD,CAAnC;;AAEA,IAAIoB,aAAa,GAAGpB,OAAO,CAAC,sBAAD,CAA3B;;AAEA,IAAIqB,uBAAuB,GAAGrB,OAAO,CAAC,mCAAD,CAArC;;AAEA,IAAIsB,iBAAiB,GAAGtB,OAAO,CAAC,2BAAD,CAA/B;;AAEA,IAAIuB,kBAAkB,GAAGvB,OAAO,CAAC,2BAAD,CAAhC;;AAEA,IAAIwB,eAAe,GAAGxB,OAAO,CAAC,yBAAD,CAA7B;;AAEA,IAAIyB,aAAa,GAAGzB,OAAO,CAAC,uBAAD,CAA3B;;AAEA,IAAI0B,uBAAuB,GAAG1B,OAAO,CAAC,qCAAD,CAArC;;AAEA,IAAI2B,iBAAiB,GAAG3B,OAAO,CAAC,+BAAD,CAA/B;;AAEA,IAAI4B,cAAc,GAAG5B,OAAO,CAAC,4BAAD,CAA5B;;AAEA,IAAI6B,0BAA0B,GAAG7B,OAAO,CAAC,oCAAD,CAAxC;;AAEA,IAAI8B,uBAAuB,GAAG9B,OAAO,CAAC,gCAAD,CAArC;;AAEA,IAAI+B,kBAAkB,GAAG/B,OAAO,CAAC,4BAAD,CAAhC;;AAEA,IAAIgC,UAAU,GAAGhC,OAAO,CAAC,mBAAD,CAAxB;;AAEA,IAAIiC,UAAU,GAAGjC,OAAO,CAAC,oBAAD,CAAxB;;AAEA,IAAIkC,kBAAkB,GAAGlC,OAAO,CAAC,4BAAD,CAAhC;;AAEA,IAAImC,qBAAqB,GAAGnC,OAAO,CAAC,+BAAD,CAAnC;;AAEA,IAAIoC,qBAAqB,GAAGpC,OAAO,CAAC,8BAAD,CAAnC;;AAEA,IAAIqC,qBAAqB,GAAGrC,OAAO,CAAC,8BAAD,CAAnC;;AAEA,IAAIsC,sBAAsB,GAAGtC,OAAO,CAAC,+BAAD,CAApC;;AAEA,IAAIuC,+BAA+B,GAAGvC,OAAO,CAAC,wCAAD,CAA7C;;AAEA,IAAIwC,kBAAkB,GAAGxC,OAAO,CAAC,2BAAD,CAAhC;;AAEA,IAAIyC,iBAAiB,GAAGzC,OAAO,CAAC,0BAAD,CAA/B;;AAEA,IAAI0C,oBAAoB,GAAG1C,OAAO,CAAC,6BAAD,CAAlC;;AAEA,IAAI2C,cAAc,GAAG3C,OAAO,CAAC,uBAAD,CAA5B;;AAEA,IAAI4C,SAAS,GAAG5C,OAAO,CAAC,kBAAD,CAAvB;;AAEA,IAAI6C,wBAAwB,GAAG7C,OAAO,CAAC,kCAAD,CAAtC;;AAEA,IAAI8C,gBAAgB,GAAG9C,OAAO,CAAC,yBAAD,CAA9B;;AAEA,IAAI+C,cAAc,GAAG/C,OAAO,CAAC,wBAAD,CAA5B;;AAEA,IAAIgD,gBAAgB,GAAGhD,OAAO,CAAC,yBAAD,CAA9B;;AAEA,IAAIiD,2BAA2B,GAAGjD,OAAO,CAAC,oCAAD,CAAzC;;AAEA,IAAIkD,mBAAmB,GAAGlD,OAAO,CAAC,oCAAD,CAAjC;;AAEA,IAAImD,UAAU,GAAGnD,OAAO,CAAC,mBAAD,CAAxB;;AAEA,IAAIoD,QAAQ,GAAGpD,OAAO,CAAC,kBAAD,CAAtB;AAAA,IACIqD,gBAAgB,GAAGD,QAAQ,CAACC,gBADhC;AAAA,IAEIC,sBAAsB,GAAGF,QAAQ,CAACE,sBAFtC;AAAA,IAGIC,UAAU,GAAGH,QAAQ,CAACG,UAH1B,C,CAKA;AACA;;;AACA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,MAAIC,MAAM,GAAG,OAAOC,GAAP,KAAe,UAAf,GAA4B,KAA5B,GAAoC,IAAjD;AACA,MAAIC,MAAM,GAAG,OAAOC,GAAP,KAAe,UAAf,GAA4B,KAA5B,GAAoC,IAAjD;AACA,MAAIC,UAAU,GAAG,OAAOC,OAAP,KAAmB,UAAnB,GAAgC,SAAhC,GAA4C,IAA7D;AACA,MAAIC,MAAM,GAAG,OAAOC,MAAM,CAACC,MAAd,KAAyB,UAAzB,GAAsC,eAAtC,GAAwD,IAArE;;AAEA,MAAIR,MAAM,IAAIE,MAAV,IAAoBE,UAApB,IAAkCE,MAAtC,EAA8C;AAC5C,UAAM,IAAIG,KAAJ,CAAU,0BAA0BC,MAA1B,CAAiC,CAACV,MAAD,EAASE,MAAT,EAAiBE,UAAjB,EAA6BE,MAA7B,EAAqCK,MAArC,CAA4CC,OAA5C,EAAqDC,IAArD,CAA0D,QAA1D,CAAjC,EAAsG,aAAtG,IAAuH,qDAAjI,CAAN;AACD;AACF;AACD;AACA;AACA;;;AAGAC,MAAM,CAACC,OAAP,GAAiB;AACf;AACAC,EAAAA,WAAW,EAAE/D,sBAFE;AAGfgE,EAAAA,OAAO,EAAE3D,YAHM;AAIf4D,EAAAA,UAAU,EAAE3D,eAJG;AAKf4D,EAAAA,kBAAkB,EAAEzD,uBALL;AAMf0D,EAAAA,YAAY,EAAEzD,iBANC;AAOf0D,EAAAA,MAAM,EAAElE,iBAPO;AAQfmE,EAAAA,aAAa,EAAE1D,kBARA;AASf2D,EAAAA,KAAK,EAAElE,gBATQ;AAUfmE,EAAAA,iBAAiB,EAAEpE,mBAAmB,CAACoE,iBAVxB;AAWftD,EAAAA,0BAA0B,EAAEA,0BAXb;AAYfuD,EAAAA,2BAA2B,EAAErE,mBAAmB,CAACqE,2BAZlC;AAafC,EAAAA,yBAAyB,EAAExE,8BAA8B,CAACwE,yBAb3C;AAcfC,EAAAA,oBAAoB,EAAEvE,mBAAmB,CAACuE,oBAd3B;AAefC,EAAAA,uBAAuB,EAAE1E,8BAA8B,CAAC0E,uBAfzC;AAgBfC,EAAAA,sBAAsB,EAAEzE,mBAAmB,CAACyE,sBAhB7B;AAiBfC,EAAAA,oBAAoB,EAAE1E,mBAAmB,CAAC0E,oBAjB3B;AAkBfC,EAAAA,OAAO,EAAExF,UAAU,CAACwF,OAlBL;AAmBfC,EAAAA,WAAW,EAAEzF,UAAU,CAACyF,WAnBT;AAoBfC,EAAAA,qBAAqB,EAAE1F,UAAU,CAAC0F,qBApBnB;AAqBfC,EAAAA,qBAAqB,EAAErE,eAAe,CAACqE,qBArBxB;AAsBfC,EAAAA,qBAAqB,EAAEtE,eAAe,CAACsE,qBAtBxB;AAuBfC,EAAAA,qBAAqB,EAAE7F,UAAU,CAAC6F,qBAvBnB;AAwBfC,EAAAA,iBAAiB,EAAEjF,mBAAmB,CAACiF,iBAxBxB;AAyBfC,EAAAA,sBAAsB,EAAE/F,UAAU,CAAC+F,sBAzBpB;AA0BfC,EAAAA,UAAU,EAAEhG,UAAU,CAACgG,UA1BR;AA2BfxD,EAAAA,oBAAoB,EAAEA,oBA3BP;AA4BfyD,EAAAA,WAAW,EAAEpF,mBAAmB,CAACoF,WA5BlB;AA6BfC,EAAAA,sBAAsB,EAAErF,mBAAmB,CAACqF,sBA7B7B;AA8BfC,EAAAA,mBAAmB,EAAEtF,mBAAmB,CAACsF,mBA9B1B;AA+BfC,EAAAA,aAAa,EAAE9E,eAAe,CAAC8E,aA/BhB;AAgCfC,EAAAA,wBAAwB,EAAExF,mBAAmB,CAACwF,wBAhC/B;AAiCfC,EAAAA,sBAAsB,EAAEzF,mBAAmB,CAACyF,sBAjC7B;AAkCfC,EAAAA,8BAA8B,EAAE1F,mBAAmB,CAAC0F,8BAlCrC;AAmCfC,EAAAA,gCAAgC,EAAE3F,mBAAmB,CAAC2F,gCAnCvC;AAoCfzD,EAAAA,2BAA2B,EAAEA,2BApCd;AAqCf0D,EAAAA,OAAO,EAAEzG,UAAU,CAACyG,OArCL;AAsCfC,EAAAA,UAAU,EAAE1G,UAAU,CAAC0G,UAtCR;AAuCfC,EAAAA,oBAAoB,EAAE3G,UAAU,CAAC2G,oBAvClB;AAwCfC,EAAAA,SAAS,EAAE5G,UAAU,CAAC4G,SAxCP;AAyCf/D,EAAAA,cAAc,EAAEA,cAzCD;AA0Cf;AACAgE,EAAAA,aAAa,EAAExG,8BAA8B,CAACwG,aA3C/B;AA4CfC,EAAAA,eAAe,EAAEzG,8BAA8B,CAACyG,eA5CjC;AA6Cf;AACAC,EAAAA,sBAAsB,EAAExG,2BA9CT;AA+CfV,EAAAA,iBAAiB,EAAEA,iBA/CJ;AAgDfI,EAAAA,gBAAgB,EAAEA,gBAhDH;AAiDf+G,EAAAA,SAAS,EAAEzF,aAAa,CAACyF,SAjDV;AAkDfC,EAAAA,WAAW,EAAE1F,aAAa,CAAC0F,WAlDZ;AAmDf;AACAzF,EAAAA,uBAAuB,EAAEA,uBApDV;AAqDfC,EAAAA,iBAAiB,EAAEA,iBArDJ;AAsDfC,EAAAA,cAAc,EAAEA,cAtDD;AAuDfK,EAAAA,UAAU,EAAEA,UAvDG;AAwDfE,EAAAA,qBAAqB,EAAEA,qBAxDR;AAyDfU,EAAAA,wBAAwB,EAAEA,wBAzDX;AA0DfK,EAAAA,mBAAmB,EAAEA,mBA1DN;AA2Df;AACAjD,EAAAA,mBAAmB,EAAEA,mBA5DN;AA6Df;AACAG,EAAAA,wBAAwB,EAAEA,wBA9DX;AA+DfgB,EAAAA,aAAa,EAAEA,aA/DA;AAgEfU,EAAAA,uBAAuB,EAAEA,uBAhEV;AAiEf;AACAzB,EAAAA,iBAAiB,EAAEA,iBAlEJ;AAmEfK,EAAAA,UAAU,EAAEA,UAnEG;AAoEfC,EAAAA,iBAAiB,EAAEA,iBApEJ;AAqEfyG,EAAAA,kBAAkB,EAAE5G,qBAAqB,CAAC4G,kBArE3B;AAsEfC,EAAAA,aAAa,EAAE7F,eAAe,CAAC6F,aAtEhB;AAuEfC,EAAAA,kBAAkB,EAAE9F,eAAe,CAAC8F,kBAvErB;AAwEfC,EAAAA,MAAM,EAAE/F,eAAe,CAAC+F,MAxET;AAyEfC,EAAAA,OAAO,EAAEhG,eAAe,CAACgG,OAzEV;AA0EfC,EAAAA,QAAQ,EAAEjG,eAAe,CAACiG,QA1EX;AA2EfC,EAAAA,OAAO,EAAElG,eAAe,CAACkG,OA3EV;AA4EfC,EAAAA,SAAS,EAAEnG,eAAe,CAACmG,SA5EZ;AA6EfC,EAAAA,YAAY,EAAEpG,eAAe,CAACoG,YA7Ef;AA8Ef5F,EAAAA,UAAU,EAAEA,UA9EG;AA+EfqB,EAAAA,gBAAgB,EAAEA,gBA/EH;AAgFfC,EAAAA,sBAAsB,EAAEA,sBAhFT;AAiFfb,EAAAA,iBAAiB,EAAEA,iBAjFJ;AAkFfc,EAAAA,UAAU,EAAEA,UAlFG;AAmFfX,EAAAA,SAAS,EAAEA,SAnFI;AAoFfE,EAAAA,gBAAgB,EAAEA,gBApFH;AAqFfE,EAAAA,gBAAgB,EAAEA,gBArFH;AAsFfG,EAAAA,UAAU,EAAEA,UAtFG;AAuFff,EAAAA,qBAAqB,EAAEA,qBAvFR;AAwFfI,EAAAA,kBAAkB,EAAEA,kBAxFL;AAyFfH,EAAAA,qBAAqB,EAAEA,qBAzFR;AA0FfC,EAAAA,sBAAsB,EAAEA,sBA1FT;AA2FfC,EAAAA,+BAA+B,EAAEA,+BA3FlB;AA4FfI,EAAAA,cAAc,EAAEA,cA5FD;AA6FfkF,EAAAA,UAAU,EAAE;AACVC,IAAAA,gBAAgB,EAAE3G,qBADR;AAEVY,IAAAA,kBAAkB,EAAEA,kBAFV;AAGVgG,IAAAA,qBAAqB,EAAEzH,sBAAsB,CAACyH,qBAHpC;AAIV9F,IAAAA,UAAU,EAAEC,kBAAkB,CAACD,UAJrB;AAKV+F,IAAAA,iBAAiB,EAAE9F,kBAAkB,CAAC8F,iBAL5B;AAMVC,IAAAA,0BAA0B,EAAE/F,kBAAkB,CAAC+F,0BANrC;AAOVC,IAAAA,6BAA6B,EAAEhG,kBAAkB,CAACgG;AAPxC;AA7FG,CAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar ConnectionHandler = require('./handlers/connection/ConnectionHandler');\n\nvar ConnectionInterface = require('./handlers/connection/ConnectionInterface');\n\nvar GraphQLTag = require('./query/GraphQLTag');\n\nvar MutationHandlers = require('./handlers/connection/MutationHandlers');\n\nvar PreloadableQueryRegistry = require('./query/PreloadableQueryRegistry');\n\nvar RelayConcreteNode = require('./util/RelayConcreteNode');\n\nvar RelayConcreteVariables = require('./store/RelayConcreteVariables');\n\nvar RelayDeclarativeMutationConfig = require('./mutations/RelayDeclarativeMutationConfig');\n\nvar RelayDefaultHandleKey = require('./util/RelayDefaultHandleKey');\n\nvar RelayDefaultHandlerProvider = require('./handlers/RelayDefaultHandlerProvider');\n\nvar RelayError = require('./util/RelayError');\n\nvar RelayFeatureFlags = require('./util/RelayFeatureFlags');\n\nvar RelayModernEnvironment = require('./store/RelayModernEnvironment');\n\nvar RelayModernOperationDescriptor = require('./store/RelayModernOperationDescriptor');\n\nvar RelayModernRecord = require('./store/RelayModernRecord');\n\nvar RelayModernSelector = require('./store/RelayModernSelector');\n\nvar RelayModernStore = require('./store/RelayModernStore');\n\nvar RelayNetwork = require('./network/RelayNetwork');\n\nvar RelayObservable = require('./network/RelayObservable');\n\nvar RelayOperationTracker = require('./store/RelayOperationTracker');\n\nvar RelayProfiler = require('./util/RelayProfiler');\n\nvar RelayQueryResponseCache = require('./network/RelayQueryResponseCache');\n\nvar RelayRecordSource = require('./store/RelayRecordSource');\n\nvar RelayReplaySubject = require('./util/RelayReplaySubject');\n\nvar RelayStoreUtils = require('./store/RelayStoreUtils');\n\nvar ViewerPattern = require('./store/ViewerPattern');\n\nvar applyOptimisticMutation = require('./mutations/applyOptimisticMutation');\n\nvar commitLocalUpdate = require('./mutations/commitLocalUpdate');\n\nvar commitMutation = require('./mutations/commitMutation');\n\nvar createFragmentSpecResolver = require('./store/createFragmentSpecResolver');\n\nvar createPayloadFor3DField = require('./util/createPayloadFor3DField');\n\nvar createRelayContext = require('./store/createRelayContext');\n\nvar deepFreeze = require('./util/deepFreeze');\n\nvar fetchQuery = require('./query/fetchQuery');\n\nvar fetchQueryInternal = require('./query/fetchQueryInternal');\n\nvar fetchQuery_DEPRECATED = require('./query/fetchQuery_DEPRECATED');\n\nvar getFragmentIdentifier = require('./util/getFragmentIdentifier');\n\nvar getPaginationMetadata = require('./util/getPaginationMetadata');\n\nvar getPaginationVariables = require('./util/getPaginationVariables');\n\nvar getPendingOperationsForFragment = require('./util/getPendingOperationsForFragment');\n\nvar getRefetchMetadata = require('./util/getRefetchMetadata');\n\nvar getRelayHandleKey = require('./util/getRelayHandleKey');\n\nvar getRequestIdentifier = require('./util/getRequestIdentifier');\n\nvar getValueAtPath = require('./util/getValueAtPath');\n\nvar isPromise = require('./util/isPromise');\n\nvar isRelayModernEnvironment = require('./store/isRelayModernEnvironment');\n\nvar isScalarAndEqual = require('./util/isScalarAndEqual');\n\nvar readInlineData = require('./store/readInlineData');\n\nvar recycleNodesInto = require('./util/recycleNodesInto');\n\nvar reportMissingRequiredFields = require('./util/reportMissingRequiredFields');\n\nvar requestSubscription = require('./subscription/requestSubscription');\n\nvar stableCopy = require('./util/stableCopy');\n\nvar _require = require('./store/ClientID'),\n    generateClientID = _require.generateClientID,\n    generateUniqueClientID = _require.generateUniqueClientID,\n    isClientID = _require.isClientID;\n\n// As early as possible, check for the existence of the JavaScript globals which\n// Relay Runtime relies upon, and produce a clear message if they do not exist.\nif (process.env.NODE_ENV !== \"production\") {\n  var mapStr = typeof Map !== 'function' ? 'Map' : null;\n  var setStr = typeof Set !== 'function' ? 'Set' : null;\n  var promiseStr = typeof Promise !== 'function' ? 'Promise' : null;\n  var objStr = typeof Object.assign !== 'function' ? 'Object.assign' : null;\n\n  if (mapStr || setStr || promiseStr || objStr) {\n    throw new Error(\"relay-runtime requires \".concat([mapStr, setStr, promiseStr, objStr].filter(Boolean).join(', and '), \" to exist. \") + 'Use a polyfill to provide these for older browsers.');\n  }\n}\n/**\n * The public interface to Relay Runtime.\n */\n\n\nmodule.exports = {\n  // Core API\n  Environment: RelayModernEnvironment,\n  Network: RelayNetwork,\n  Observable: RelayObservable,\n  QueryResponseCache: RelayQueryResponseCache,\n  RecordSource: RelayRecordSource,\n  Record: RelayModernRecord,\n  ReplaySubject: RelayReplaySubject,\n  Store: RelayModernStore,\n  areEqualSelectors: RelayModernSelector.areEqualSelectors,\n  createFragmentSpecResolver: createFragmentSpecResolver,\n  createNormalizationSelector: RelayModernSelector.createNormalizationSelector,\n  createOperationDescriptor: RelayModernOperationDescriptor.createOperationDescriptor,\n  createReaderSelector: RelayModernSelector.createReaderSelector,\n  createRequestDescriptor: RelayModernOperationDescriptor.createRequestDescriptor,\n  getDataIDsFromFragment: RelayModernSelector.getDataIDsFromFragment,\n  getDataIDsFromObject: RelayModernSelector.getDataIDsFromObject,\n  getNode: GraphQLTag.getNode,\n  getFragment: GraphQLTag.getFragment,\n  getInlineDataFragment: GraphQLTag.getInlineDataFragment,\n  getModuleComponentKey: RelayStoreUtils.getModuleComponentKey,\n  getModuleOperationKey: RelayStoreUtils.getModuleOperationKey,\n  getPaginationFragment: GraphQLTag.getPaginationFragment,\n  getPluralSelector: RelayModernSelector.getPluralSelector,\n  getRefetchableFragment: GraphQLTag.getRefetchableFragment,\n  getRequest: GraphQLTag.getRequest,\n  getRequestIdentifier: getRequestIdentifier,\n  getSelector: RelayModernSelector.getSelector,\n  getSelectorsFromObject: RelayModernSelector.getSelectorsFromObject,\n  getSingularSelector: RelayModernSelector.getSingularSelector,\n  getStorageKey: RelayStoreUtils.getStorageKey,\n  getVariablesFromFragment: RelayModernSelector.getVariablesFromFragment,\n  getVariablesFromObject: RelayModernSelector.getVariablesFromObject,\n  getVariablesFromPluralFragment: RelayModernSelector.getVariablesFromPluralFragment,\n  getVariablesFromSingularFragment: RelayModernSelector.getVariablesFromSingularFragment,\n  reportMissingRequiredFields: reportMissingRequiredFields,\n  graphql: GraphQLTag.graphql,\n  isFragment: GraphQLTag.isFragment,\n  isInlineDataFragment: GraphQLTag.isInlineDataFragment,\n  isRequest: GraphQLTag.isRequest,\n  readInlineData: readInlineData,\n  // Declarative mutation API\n  MutationTypes: RelayDeclarativeMutationConfig.MutationTypes,\n  RangeOperations: RelayDeclarativeMutationConfig.RangeOperations,\n  // Extensions\n  DefaultHandlerProvider: RelayDefaultHandlerProvider,\n  ConnectionHandler: ConnectionHandler,\n  MutationHandlers: MutationHandlers,\n  VIEWER_ID: ViewerPattern.VIEWER_ID,\n  VIEWER_TYPE: ViewerPattern.VIEWER_TYPE,\n  // Helpers (can be implemented via the above API)\n  applyOptimisticMutation: applyOptimisticMutation,\n  commitLocalUpdate: commitLocalUpdate,\n  commitMutation: commitMutation,\n  fetchQuery: fetchQuery,\n  fetchQuery_DEPRECATED: fetchQuery_DEPRECATED,\n  isRelayModernEnvironment: isRelayModernEnvironment,\n  requestSubscription: requestSubscription,\n  // Configuration interface for legacy or special uses\n  ConnectionInterface: ConnectionInterface,\n  // Utilities\n  PreloadableQueryRegistry: PreloadableQueryRegistry,\n  RelayProfiler: RelayProfiler,\n  createPayloadFor3DField: createPayloadFor3DField,\n  // INTERNAL-ONLY: These exports might be removed at any point.\n  RelayConcreteNode: RelayConcreteNode,\n  RelayError: RelayError,\n  RelayFeatureFlags: RelayFeatureFlags,\n  DEFAULT_HANDLE_KEY: RelayDefaultHandleKey.DEFAULT_HANDLE_KEY,\n  FRAGMENTS_KEY: RelayStoreUtils.FRAGMENTS_KEY,\n  FRAGMENT_OWNER_KEY: RelayStoreUtils.FRAGMENT_OWNER_KEY,\n  ID_KEY: RelayStoreUtils.ID_KEY,\n  REF_KEY: RelayStoreUtils.REF_KEY,\n  REFS_KEY: RelayStoreUtils.REFS_KEY,\n  ROOT_ID: RelayStoreUtils.ROOT_ID,\n  ROOT_TYPE: RelayStoreUtils.ROOT_TYPE,\n  TYPENAME_KEY: RelayStoreUtils.TYPENAME_KEY,\n  deepFreeze: deepFreeze,\n  generateClientID: generateClientID,\n  generateUniqueClientID: generateUniqueClientID,\n  getRelayHandleKey: getRelayHandleKey,\n  isClientID: isClientID,\n  isPromise: isPromise,\n  isScalarAndEqual: isScalarAndEqual,\n  recycleNodesInto: recycleNodesInto,\n  stableCopy: stableCopy,\n  getFragmentIdentifier: getFragmentIdentifier,\n  getRefetchMetadata: getRefetchMetadata,\n  getPaginationMetadata: getPaginationMetadata,\n  getPaginationVariables: getPaginationVariables,\n  getPendingOperationsForFragment: getPendingOperationsForFragment,\n  getValueAtPath: getValueAtPath,\n  __internal: {\n    OperationTracker: RelayOperationTracker,\n    createRelayContext: createRelayContext,\n    getOperationVariables: RelayConcreteVariables.getOperationVariables,\n    fetchQuery: fetchQueryInternal.fetchQuery,\n    fetchQueryDeduped: fetchQueryInternal.fetchQueryDeduped,\n    getPromiseForActiveRequest: fetchQueryInternal.getPromiseForActiveRequest,\n    getObservableForActiveRequest: fetchQueryInternal.getObservableForActiveRequest\n  }\n};"]},"metadata":{},"sourceType":"script"}