{"ast":null,"code":"var _jsxFileName = \"/home/akshay/Atishay/appointy-screening/src/context/Token/TokenState.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport TokenContext from \"./TokenContext\";\nimport { getAuth, signInWithPopup, GithubAuthProvider } from \"firebase/auth\";\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport { Environment, Network, RecordSource, Store } from 'relay-runtime';\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TokenState = props => {\n  _s();\n\n  const [tokenValue, setTokenValue] = useState(\"\");\n  const firebaseConfig = {\n    apiKey: \"AIzaSyC1Ybbqn2ZgdXsJcnSDKWer0Zx3-Qv0ROM\",\n    authDomain: \"repo-improv.firebaseapp.com\",\n    projectId: \"repo-improv\",\n    storageBucket: \"repo-improv.appspot.com\",\n    messagingSenderId: \"326241984035\",\n    appId: \"1:326241984035:web:ade250b2bc59dc8763db96\",\n    measurementId: \"G-B09R5NFKVV\"\n  }; // Initialize Firebase\n\n  const app = initializeApp(firebaseConfig);\n  const analytics = getAnalytics(app);\n\n  const signInAuth = provider => {\n    const auth = getAuth();\n    signInWithPopup(auth, provider).then(result => {\n      // This gives you a GitHub Access Token. You can use it to access the GitHub API.\n      const credential = GithubAuthProvider.credentialFromResult(result);\n      const token = credential.accessToken;\n      console.log(token);\n      setTokenValue(token);\n      /* \n                  localStorage.setItem(\"token\", token); */\n      // The signed-in user info.\n\n      const user = result.user;\n      console.log(user);\n      /* \n          localStorage.setItem(\"user\" , user.displayName); */\n      // ...\n    }).catch(error => {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message; // The email of the user's account used.\n\n      const email = error.email; // The AuthCredential type that was used.\n\n      const credential = GithubAuthProvider.credentialFromError(error); // ...\n    });\n  };\n\n  const FetchGraphQL = async (text, variables) => {\n    const TOKEN = tokenValue;\n    console.log(TOKEN); // Fetch data from GitHub's GraphQL API:\n\n    const response = await fetch('https://api.github.com/graphql', {\n      method: 'POST',\n      headers: {\n        Authorization: `bearer ${TOKEN}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query: text,\n        variables\n      })\n    }); // Get the response as JSON\n\n    return await response.json();\n  };\n\n  async function fetchRelay(params, variables) {\n    console.log(`fetching query ${params.name} with ${JSON.stringify(variables)}`);\n    return FetchGraphQL(params.text, variables);\n  } // Export a singleton instance of Relay Environment configured with our network function:\n\n\n  new Environment({\n    network: Network.create(fetchRelay),\n    store: new Store(new RecordSource())\n  });\n  return /*#__PURE__*/_jsxDEV(TokenContext.Provider, {\n    value: {\n      tokenValue,\n      signInAuth\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TokenState, \"C1J+HR2E4sknNHzFEIEoUOfvbg8=\");\n\n_c = TokenState;\nexport default TokenState;\n\nvar _c;\n\n$RefreshReg$(_c, \"TokenState\");","map":{"version":3,"sources":["/home/akshay/Atishay/appointy-screening/src/context/Token/TokenState.js"],"names":["React","TokenContext","getAuth","signInWithPopup","GithubAuthProvider","initializeApp","getAnalytics","Environment","Network","RecordSource","Store","useState","TokenState","props","tokenValue","setTokenValue","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","analytics","signInAuth","provider","auth","then","result","credential","credentialFromResult","token","accessToken","console","log","user","catch","error","errorCode","code","errorMessage","message","email","credentialFromError","FetchGraphQL","text","variables","TOKEN","response","fetch","method","headers","Authorization","body","JSON","stringify","query","json","fetchRelay","params","name","network","create","store","children"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport TokenContext from \"./TokenContext\";\nimport { getAuth, signInWithPopup, GithubAuthProvider } from \"firebase/auth\";\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport {Environment, Network, RecordSource, Store} from 'relay-runtime';\nimport { useState } from \"react\";\n\nconst TokenState = (props) => {\n    \n    const [tokenValue,setTokenValue] = useState(\"\")\n\n    const firebaseConfig = {\n        apiKey: \"AIzaSyC1Ybbqn2ZgdXsJcnSDKWer0Zx3-Qv0ROM\",\n        authDomain: \"repo-improv.firebaseapp.com\",\n        projectId: \"repo-improv\",\n        storageBucket: \"repo-improv.appspot.com\",\n        messagingSenderId: \"326241984035\",\n        appId: \"1:326241984035:web:ade250b2bc59dc8763db96\",\n        measurementId: \"G-B09R5NFKVV\"\n      };\n      \n      // Initialize Firebase\n      const app = initializeApp(firebaseConfig);\n      const analytics = getAnalytics(app);\n      \n    const signInAuth = (provider) => {\n        const auth = getAuth();\n        signInWithPopup(auth, provider)\n            .then((result) => {\n                // This gives you a GitHub Access Token. You can use it to access the GitHub API.\n                const credential = GithubAuthProvider.credentialFromResult(result);\n             const token = credential.accessToken;\n                console.log(token)\n                setTokenValue(token);\n    /* \n                localStorage.setItem(\"token\", token); */\n    \n                // The signed-in user info.\n                const user = result.user;\n                console.log(user)\n                /* \n                    localStorage.setItem(\"user\" , user.displayName); */\n                // ...\n            }).catch((error) => {\n                // Handle Errors here.\n                const errorCode = error.code;\n                const errorMessage = error.message;\n                // The email of the user's account used.\n                const email = error.email;\n                // The AuthCredential type that was used.\n                const credential = GithubAuthProvider.credentialFromError(error);\n                // ...\n            });\n    }\n\n    const FetchGraphQL = async(text, variables) => {\n\n        const TOKEN = tokenValue;\n        console.log(TOKEN);\n        // Fetch data from GitHub's GraphQL API:\n        const response = await fetch('https://api.github.com/graphql', {\n          method: 'POST',\n          headers: {\n            Authorization: `bearer ${TOKEN}`,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            query: text,\n            variables,\n          }),\n        });\n      \n        // Get the response as JSON\n        return await response.json();\n      }\n\n      async function fetchRelay(params, variables) {\n        console.log(`fetching query ${params.name} with ${JSON.stringify(variables)}`);\n        return FetchGraphQL(params.text, variables);\n      }\n      \n      // Export a singleton instance of Relay Environment configured with our network function:\n       new Environment({\n        network: Network.create(fetchRelay),\n        store: new Store(new RecordSource()),\n      });\n\n    return (\n        <TokenContext.Provider value={{tokenValue, signInAuth}}>\n            {props.children}\n        </TokenContext.Provider>\n    )\n}\n\nexport default TokenState"]},"metadata":{},"sourceType":"module"}